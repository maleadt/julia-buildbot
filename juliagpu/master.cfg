# -*- python -*-
# ex: set syntax=python:

import passwords

import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, "common"))

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### LOCKS

from buildbot.locks import SlaveLock

# Dictionary with locks to be consumed by different builders
locks = {}

# A global activity lock which restricts the amount of concurrent load per slave
locks['activity'] = SlaveLock('activity',
    maxCountForSlave = {
        'hydor.elis.ugent.be':      3
    }
)



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave('hydor.elis.ugent.be', passwords.buildslaves['hydor.elis.ugent.be'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9988}}



####### CODEBASES

## repository database with URLs and default branches

repositories = {
    'Julia':        (r'https://github.com/JuliaLang/julia.git',        'tb/cuda'),
    'LLVM':         (r'https://github.com/maleadt/LLVM.jl.git',         None),
    'CUDAdrv':      (r'https://github.com/JuliaGPU/CUDAdrv.jl.git',     None),
    'CUDAnative':   (r'https://github.com/JuliaGPU/CUDAnative.jl.git',  None),
}

# Get the URL of a certain repository
def getRepositoryURL(repo):
    return repositories[repo][0]

# Get the default branch of a certain repository
def getRepositoryBranch(repo):
    return repositories[repo][1]


## codebase generator

repo_urls = {}
for repo,v in repositories.items():
    repo_urls[v[0]] = repo

def codebaseGenerator(chdict):
    return repo_urls[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator


## codebase dict for schedulers

def getCodebases(repositories):
    if isinstance(repositories, basestring):
        if repositories == "all":
            repositories = ['Julia', 'LLVM', 'CUDAdrv', 'CUDAnative']
        else:
            error("unknown repository group '%s'" % repositories)

    codebases = {}
    for repo in repositories:
        codebases[repo] = { 'repository': getRepositoryURL(repo),
                            'branch':     getRepositoryBranch(repo)}
    return codebases



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
import re

# check whether we should care about a branch on the Julia repo
def check_branch(branch):
    branch_re = re.compile(r'(^|\/)cuda')
    return (branch_re.search(branch) is not None)

c['change_source'] = [
    GitPoller(getRepositoryURL('Julia'),      branches=check_branch, pollInterval=5*60),
    GitPoller(getRepositoryURL('LLVM'),       branches=True,         pollInterval=5*60),
    GitPoller(getRepositoryURL('CUDAdrv'),    branches=True,         pollInterval=5*60),
    GitPoller(getRepositoryURL('CUDAnative'), branches=True,         pollInterval=5*60)
]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.changes import filter

c['schedulers'] = []


# Change-based schedulers

from buildbot.schedulers.basic import AnyBranchScheduler

# Perform a plain build+test for each group of commits on the GPU branches
c['schedulers'].append(AnyBranchScheduler(
        name="JuliaGPU",
        treeStableTimer = 2*60,
        codebases = getCodebases('all'),
        builderNames = [ "llvm39.release", "llvm39.debug" ]
    )
)


# User-controlled schedulers

from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'].append(ForceScheduler(
        name = "force JuliaGPU",
        codebases = getCodebases('all'),
        builderNames = [ "llvm39.release", "llvm39.debug", "llvmsvn.release" ]
    )
)



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.slave import RemoveDirectory
from generic import FileCreate
import generic

# Steps to build and test our main development tree
def CreateMainFactory(llvm="3.9.0", debug=False, cores=4):
    f = BuildFactory()

    ## compiler

    # environment variables
    compiler_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes",
        "JULIA_CPU_CORES":  str(cores)
    }

    # Make.user
    compiler_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",

        "LLVM_ASSERTIONS":  "1",
        "LLVM_VER":         llvm
    }

    def compiler_changed(step):
        all_changes = 0
        for k, v in step.build.requests[0].sources.items():
            all_changes += len(v.changes)
        return all_changes == 0 or len(step.build.requests[0].sources['Julia'].changes) > 0

    f.addSteps([
        Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='incremental',
            codebase="Julia",
            workdir="julia"),

        ShellCommand(
            name="clean dependencies",
            command=["find", "deps/srccache", "-mindepth", "1", "-maxdepth", "1",
                                              "-not", "-name", "*.tar.*",
                             "-print", "-exec", "rm", "-rf", "{}", "+"],
            workdir="julia",
            flunkOnFailure=False),

        RemoveDirectory(
            name="clean compiler",
            dir="julia/build"),
        ShellCommand(
            name="prepare compiler",
            command=["make", "O=build", "configure"],
            env=compiler_env,
            workdir="julia",
            haltOnFailure=True),
        FileCreate(
            name="configure compiler",
            data=generic.strMakeUser(compiler_config),
            slavedest="Make.user",
            workdir="julia/build",
            haltOnFailure=True),
        ShellCommand(
            name="compile compiler",
            command=["make", "-j", str(cores)],
            env=compiler_env,
            workdir="julia/build",
            haltOnFailure = True),
        ShellCommand(
            name="test compiler",
            doStepIf=compiler_changed,
            command=["make", "testall"],
            env=compiler_env,
            workdir="julia/build")
    ])


    ## packages

    package_env = {
        "JULIA_PKGDIR":    Interpolate("%(prop:builddir)s/packages")
    }
    if debug:
        package_env["TRACE"] = "1"

    f.addSteps([
        RemoveDirectory(
            name="clean packages",
            dir="packages"),
        ShellCommand(
            name="initialize packages",
            command=["./julia", "-e", 'Pkg.init()'],
            env=package_env,
            workdir="julia/build"),
        SetPropertyFromCommand(
            name="get package directory",
            command=["./julia", "-e", "println(Pkg.dir())"],
            property='pkgdir',
            env=package_env,
            workdir="julia/build"),
        Git(
            name="checkout",
            repourl=getRepositoryURL("LLVM"),
            codebase="LLVM",
            workdir=Interpolate("%(prop:pkgdir)s/LLVM"),
            haltOnFailure=True),
        Git(
            name="checkout",
            repourl=getRepositoryURL("CUDAdrv"),
            codebase="CUDAdrv",
            workdir=Interpolate("%(prop:pkgdir)s/CUDAdrv"),
            haltOnFailure=True),
        Git(
            name="checkout",
            repourl=getRepositoryURL("CUDAnative"),
            codebase="CUDAnative",
            workdir=Interpolate("%(prop:pkgdir)s/CUDAnative"),
            haltOnFailure=True),
        ShellCommand(
            name="initialize package dependencies",
            command=["./julia", "-e", 'Pkg.resolve()'],
            env=package_env,
            workdir="julia/build"),
        ShellCommand(
            name="build packages",
            command=["./julia", "-e", 'Pkg.build("CUDAnative")'],
            env=package_env,
            workdir="julia/build"),
        ShellCommand(
            name="test LLVM.jl",
            command=["./julia", "-e", 'Pkg.test("LLVM")'],
            env=package_env,
            workdir="julia/build"),
        ShellCommand(
            name="test CUDAdrv.jl",
            command=["./julia", "-e", 'Pkg.test("CUDAdrv", coverage=true)'],
            env=package_env,
            workdir="julia/build"),
        ShellCommand(
            name="test CUDAnative.jl",
            command=["./julia", "-e", 'Pkg.test("CUDAnative", coverage=true)'],
            env=package_env,
            workdir="julia/build")
    ])


    ## coverage

    f.addSteps([
        ShellCommand(
            name="install Coverage.jl",
            command=["./julia", "-e", 'Pkg.add("Coverage")'],
            env=package_env,
            workdir="julia/build",
            haltOnFailure=True,
            flunkOnFailure=False),
        ShellCommand(
            name="submit CUDAdrv.jl coverage",
            command=["./julia", "-e", 'cd(Pkg.dir("CUDAdrv")); using Coverage; Codecov.submit_local(process_folder())'],
            env=generic.merge({ "CODECOV_TOKEN": passwords.codecov["CUDAdrv"] },
                              package_env),
            workdir="julia/build",
            flunkOnFailure=False),
        ShellCommand(
            name="submit CUDAnative.jl coverage",
            command=["./julia", "-e", 'cd(Pkg.dir("CUDAnative")); using Coverage; Codecov.submit_local(process_folder())'],
            env=generic.merge({ "CODECOV_TOKEN": passwords.codecov["CUDAnative"] },
                              package_env),
            workdir="julia/build",
            flunkOnFailure=False)
    ])

    return f

# Build configurations

from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].extend([
    BuilderConfig(
        name="llvm39.release",
        slavenames=["hydor.elis.ugent.be"],
        factory=CreateMainFactory(llvm="3.9.0", debug=False)
    ),
    BuilderConfig(
        name="llvm39.debug",
        slavenames=["hydor.elis.ugent.be"],
        factory=CreateMainFactory(llvm="3.9.0", debug=True)
    ),
    BuilderConfig(
        name="llvmsvn.release",
        slavenames=["hydor.elis.ugent.be"],
        factory=CreateMainFactory(llvm="svn", debug=False)
    ),
])



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
    useHttpHeader = True,
    httpLoginUrl = 'http://hydor.elis.ugent.be/julia/buildbot/login',
    auth = auth.HTPasswdAprAuth('/etc/apache2/users.conf'),

    # Totally disabled
    gracefulShutdown = False,
    forceAllBuilds = False,
    stopAllBuilds = False,
    pingBuilder = False,

    # Only for authenticated users
    forceBuild = 'auth',
    stopBuild = 'auth',
    cancelPendingBuild = 'auth',
    pauseSlave = 'auth',
)
c['status'].append(html.WebStatus(
        http_port="tcp:8012:interface=127.0.0.1",
        authz=authz_cfg
    )
)

import slack
slack_notifier = slack.SlackStatusPush(passwords.slackhook,
                                       False, "buildbot", "https://a.fsdn.com/allura/p/buildbot/icon")
c['status'].append(slack_notifier)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "JuliaGPU"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://hydor.elis.ugent.be/julia/buildbot/gpu/"



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
