# -*- python -*-
# ex: set syntax=python:

import sys
sys.path.insert(0, '../common')

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### LOCKS

from buildbot.locks import SlaveLock

# Dictionary with locks to be consumed by different builders
locks = {}

# A global activity lock which restricts the amount of concurrent load per slave
locks['activity'] = SlaveLock('activity',
    maxCountForSlave = {
        'hydor.elis.ugent.be':      4
    }
)



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from passwords import passwd
c['slaves'] = [
    BuildSlave('hydor.elis.ugent.be',       passwd['hydor.elis.ugent.be'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}



####### CODEBASES

repository = 'https://github.com/JuliaLang/julia.git'



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = [
    GitPoller(repository, branch='master', pollInterval=5*60)
]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.changes import filter

c['schedulers'] = []


# Time-based schedulers

from buildbot.schedulers.timed import Nightly

# Perform a thorough sanitized build+test once every day
c['schedulers'].append(Nightly(
        name = "JuliaCPU+ASAN",
        change_filter = filter.ChangeFilter(branch = 'master'),
        branch = 'master',
        hour = 7,
        builderNames = [ "JuliaCPU+ASAN on Linux 64-bit", #"Julia+ASAN on Linux 32-bit",
                       ]
    )
)


# Change-based schedulers

from buildbot.schedulers.basic import SingleBranchScheduler

# Perform a plain Julia build+test
c['schedulers'].append(SingleBranchScheduler(
        name="JuliaCPU",
        change_filter = filter.ChangeFilter(branch = 'master'),
        builderNames = [ "JuliaCPU on Linux 64-bit", #"JuliaCPU on Linux 32-bit",
                       ]
    )
)


# User-controlled schedulers

from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'].append(ForceScheduler(
        name = "force JuliaCPU",
        builderNames = [ "JuliaCPU on Linux 64-bit", #"JuliaCPU on Linux 32-bit",
                         "JuliaCPU+ASAN on Linux 64-bit" ]
    )
)



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import FileUpload
from generic import FileCreate
import generic

make_env = {
    "VERBOSE":          "1",
    "CCACHE_CPP2":      "yes",
    "JULIA_CPU_CORES":  "4"
}

# Steps to build and test upstream Julia
main_config = {
    "USECLANG":         "1",
    "CC":               "/usr/local/lib/ccache/bin/clang",
    "CXX":              "/usr/local/lib/ccache/bin/clang++",

    "LLVM_ASSERTIONS":  "1"
}
factory_main = BuildFactory()
factory_main.addSteps([
    Git(
        name="checkout Julia",
        repourl=repository,
        mode='incremental',
        workdir="julia"),

    ShellCommand(
        name="clean dependencies",
        command=["find", "deps/srccache", "-mindepth", "1", "-maxdepth", "1",
                                          "-not", "-name", "*.tar.*",
                         "-print", "-exec", "rm", "-rf", "{}", "+"],
        env=make_env,
        workdir="julia"),

    RemoveDirectory(
        name="clean compiler",
        dir="julia/build"),
    ShellCommand(
        name="prepare compiler",
        command=["make", "O=build", "configure"],
        env=make_env,
        workdir="julia"),
    FileCreate(
        name="configure compiler",
        data=generic.strMakeUser(main_config),
        slavedest="Make.user",
        workdir="julia/build"),
    ShellCommand(
        name="build compiler",
        command=["make"],
        env=make_env,
        workdir="julia/build",
        haltOnFailure = True),
    ShellCommand(
        name="test compiler",
        command=["make", "testall"],
        env=make_env,
        workdir="julia/build")
])

# Steps to verify our build environment on upstream Julia
asan_toolchain_config = {
    "USECLANG":         "1",
    "CC":               "/usr/local/lib/ccache/bin/clang",
    "CXX":              "/usr/local/lib/ccache/bin/clang++",

    "LLVM_VER":         "3.8.1",    # needs to match runtime config
    "BUILD_LLVM_CLANG": "1",
    "USE_LLVM_SHLIB":   "0",        # LLVM bug 23649
    "LLVM_USE_CMAKE":   "1"         # ASAN isn't built with autotools
}
asan_runtime_config = {
    "USECLANG":         "1",

    "LLVM_VER":         "3.8.1",    # 3.7 + CMake results in SHLIB without __jit*
    "USE_LLVM_SHLIB":   "1",        # TODO: why do we need this?
    "LLVM_USE_CMAKE":   "1",        # autotools doesn't have a self-sanitize mode

    "SANITIZE":         "1",
    "LLVM_SANITIZE":    "1",
    "LLVM_ASSERTIONS":  "1"
}
asan_options = {
    "allow_user_segv_handler":  "1",
    "detect_leaks":             "0",

    # Memory-saving options from "Fast memory debugger for large software projects"
    # http://injoit.org/index.php/j1/article/viewFile/231/184
    "malloc_context_size":      "2",
    "fast_unwind_on_malloc":    "0",
    #"quarantine_size_mb":       "64"	# 1<<6, ASAN_LOW_MEMORY default
    # TODO: also redzone=32?
}
asan_options_str = ':'.join("%s=%s" % (key,value) for key,value in asan_options.items())
factory_asan = BuildFactory()
factory_asan.addSteps([
    Git(
        name="checkout Julia",
        repourl=repository,
        mode='incremental',
        workdir="julia"),

    ShellCommand(
        name="clean dependencies",
        command=["find", "deps/srccache", "-mindepth", "1", "-maxdepth", "1",
                                          "-not", "-name", "*.tar.*",
                         "-print", "-exec", "rm", "-rf", "{}", "+"],
        env=make_env,
        workdir="julia"),

    RemoveDirectory(
        name="clean toolchain",
        dir="julia/toolchain"),
    ShellCommand(
        name="prepare toolchain",
        command=["make", "O=toolchain", "configure"],
        env=make_env,
        workdir="julia"),
    FileCreate(
        name="configure toolchain",
        data=generic.strMakeUser(asan_toolchain_config),
        slavedest="Make.user",
        workdir="julia/toolchain"),
    ShellCommand(
        name="compile toolchain",
        command=["make", "install-llvm"],
        env=make_env,
        workdir="julia/toolchain/deps",
        haltOnFailure = True),
    ShellCommand(
        name="fix toolchain",
        command="mv usr/bin/clang* usr/tools",
        workdir="julia/toolchain",
        flunkOnFailure = False),

    RemoveDirectory(
        name="clean compiler",
        dir="julia/build"),
    ShellCommand(
        name="prepare compiler",
        command=["make", "O=build", "configure"],
        env=make_env,
        workdir="julia"),
    FileCreate(
        name="configure compiler",
        workdir="julia/build",
        data=generic.merge(
            # TODO: doesn't seem to affect deps/compile-libgit2?
            { "CC":  Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/clang"),
              "CXX": Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/clang++") },
            asan_runtime_config),
        slavedest="Make.user"),
    ShellCommand(
        name="clean compiler",
        workdir="julia/build",
        command=["make", "cleanall"],
        env=make_env),
    ShellCommand(
        name="build compiler",
        workdir="julia/build",
        command=["make"],
        env=generic.merge(
            { "ASAN_OPTIONS":         asan_options_str,
              "ASAN_SYMBOLIZER_PATH": Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/llvm-symbolizer") },
            make_env),
        haltOnFailure = True),
    ShellCommand(
        name="test compiler",
        workdir="julia/build",
        command=["make", "testall1"],
        timeout=7200,
        env=generic.merge(
            { "ASAN_OPTIONS":         asan_options_str,
              "ASAN_SYMBOLIZER_PATH": Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/llvm-symbolizer") },
            make_env))
])


# Build configurations

from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].extend([
    BuilderConfig(
        name="JuliaCPU on Linux 64-bit",
        slavenames=["hydor.elis.ugent.be"],
        factory=factory_main
    ),
    # BuilderConfig(
    #     name="JuliaCPU on Linux 32-bit",
    #     slavenames=["marsupilami"],
    #     factory=factory_main
    # )
])

c['builders'].extend([
    BuilderConfig(
        name="JuliaCPU+ASAN on Linux 64-bit",
        slavenames=["hydor.elis.ugent.be"],
        factory=factory_asan
    )
])



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
    useHttpHeader = True,
    httpLoginUrl = 'http://hydor.elis.ugent.be/julia/buildbot/login',
    auth = auth.HTPasswdAprAuth('/etc/apache2/users.conf'),

    # Totally disabled
    gracefulShutdown = False,
    forceAllBuilds = False,
    stopAllBuilds = False,
    pingBuilder = False,
    
    # Only for authenticated users
    forceBuild = 'auth',
    stopBuild = 'auth',
    cancelPendingBuild = 'auth',
    pauseSlave = 'auth',
)
c['status'].append(html.WebStatus(
        http_port="tcp:8011:interface=127.0.0.1",
        authz=authz_cfg
    )
)

import slack
slack_notifier = slack.SlackStatusPush(passwd['slackhook'],
                                       False, "buildbot", "https://a.fsdn.com/allura/p/buildbot/icon")
c['status'].append(slack_notifier)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "JuliaCPU"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://hydor.elis.ugent.be/julia/buildbot/cpu/"



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
