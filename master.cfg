# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

import sys
import os

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), "common"))
import private

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}



####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker('hydor', private.workers['hydor'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

configurations = {
    'x86-64': 'hydor'
}

# I/O is precious, and performing too many parallel operations can easily starve the worker.
# add this lock to I/O-heavy steps: `locks=[io_lock.access('counting')]`
io_lock = util.MasterLock("I/O", maxCount=4)



####### CODEBASES

## repository database with URLs and default branches

repositories = {
    'Julia':         (r'https://github.com/JuliaLang/julia',           None),
    # package repositories are populated by `schedule_package`
}

# Get the URL of a certain repository
def getRepositoryURL(repo):
    return repositories[repo][0]

# Get the default branch of a certain repository
def getRepositoryBranch(repo):
    return repositories[repo][1]


## codebase dict for schedulers

def getCodebases(repositories, branches={}):
    # build the codebases dict
    codebases = {}
    for repo in repositories:
        url = getRepositoryURL(repo)
        branch = getRepositoryBranch(repo)

        # allow overriding the selected branch
        if repo in branches:
            branch = branches[repo]

        codebases[repo] = { 'repository': url,
                            'branch':     branch}
    return codebases



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []
c['change_source'].append(
    # package repositories are handled through a webhook
    changes.GitPoller(getRepositoryURL('Julia'),      branches=True, pollInterval=5*60)
)



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []




####### BUILD FACTORIES

import generic

# TODO: encode worker's `/mnt/storage/buildbot` in its `buildbot.tac`?

# Steps to build, test and deploy Julia
def build_julia(version, triggerables, llvm=None, debug=False, cores=16):
    f = util.BuildFactory()


    ## prepare

    f.addSteps([
        steps.Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='full',
            method='fresh',
            codebase="Julia",
            workdir="julia"),
        steps.SetPropertyFromCommand(
            name="get commit name",
            command="contrib/commit-name.sh",
            property="commit_name",
            workdir="julia"),

        steps.ShellCommand(
            name="restore srccache",
            command=["rsync", "--archive", "--verbose",
                     "/mnt/storage/buildbot/workers/julia/srccache", "deps"],
            locks=[io_lock.access('counting')],
            workdir="julia",
            flunkOnFailure=False),
    ])


    ## build

    # environment variables
    julia_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes",
        "JULIA_CPU_CORES":  str(cores)
    }

    # Make.user
    julia_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",
        "FC":               "/usr/local/lib/ccache/bin/gfortran",

        "BUILD_LLVM_CLANG": "1",
        "LLVM_ASSERTIONS":  "1"
    }
    if llvm is not None:
        julia_config["LLVM_VER"] = llvm

    f.addSteps([
        steps.StringDownload(
            name="configure Julia",
            s=generic.MakeUser(julia_config),
            workerdest="Make.user",
            workdir="julia",
            haltOnFailure=True),
        steps.ShellCommand(
            name="compile Julia",
            command=["make", "-j", str(cores), "all"],
            env=julia_env,
            workdir="julia",
            haltOnFailure=True),
        steps.ShellCommand(
            name="test Julia",
            command=["make", "testall"],
            env=julia_env,
            workdir="julia",
            haltOnFailure=True),
    ])


    ## package

    f.addSteps([
        steps.ShellCommand(
            name="prepare packaging",
            command=["mkdir", "-p", "julia/" + version],
            workdir="/mnt/storage/buildbot/workers")
    ])

    # using `make dist` would be nice, but we need access to many more files:
    # - llvm-config and libLLVM for LLVM.jl/CUDAnative.jl
    #   https://github.com/JuliaLang/julia/issues/19302
    #   https://github.com/maleadt/LLVM.jl/issues/17
    # - private Clang headers for Cxx.jl/CUDAnativelib.jl
    # ... so just tar up those parts of the build tree we need
    #
    # However, it complicates building against 0.5 because not doing `make dist`
    # results in an incomplete build dir (see JuliaLang/julia#19002),
    # so we need to include even more sources.
    #
    # NOTE: we don't just tar up the _entire_ build tree for disk usage reasons
    def decode_assignment(rc, stdout, stderr):
        var, value = stdout.rstrip().split('=')
        return {var: value}
    f.addStep(
        steps.SetPropertyFromCommand(
            name="get LLVM version",
            command=["make", "print-LLVM_VER"],
            extract_fn=decode_assignment,
            workdir="julia/deps")
    )
    files = [
        # Compiled julia + tools (for LLVM.jl/CUDAnative.jl)
        "usr",
        # Build properties (for Cxx.jl/CUDAnativelib.jl)
        "Make.user", "deps/Versions.make",
        # Headers missing from build tree (for LLVM.jl on 0.5)
        "src", "contrib",
        # LLVM/Clang sources (for Cxx.jl/CUDAnativelib.jl)
        util.Interpolate("deps/srccache/llvm-%(prop:LLVM_VER)s")
    ]

    f.addSteps([
        steps.SetPropertyFromCommand(
            name="get commit hash",
            command=["git", "rev-parse", "--short=10", "HEAD"],
            property="commit_hash",
            workdir="julia"),
        steps.ShellCommand(
            name="package Julia",
            command=["tar", "--create", "--verbose", "--file",
                     util.Interpolate("/mnt/storage/buildbot/workers/julia/" + version + "/julia-%(prop:commit_name)s.tar")
                    ] + files,
            locks=[io_lock.access('counting')],
            workdir="julia",
            haltOnFailure=True)
    ])


    ## deploy

    deploy_location = "/opt/julia-"+version+"/"
    includes = [util.Interpolate("--include=/%(kw:file)s", file=file) for file in files] + [
                util.Interpolate("--include=/%(kw:file)s/**", file=file) for file in files]
    f.addSteps([
        steps.ShellCommand(
            name="deploy",
            command=["rsync", "--archive", "--delete", "--delete-excluded"] + includes +
                    ["--exclude=*", ".", "/opt/julia-"+version+"/"],
            locks=[io_lock.access('counting')],
            workdir="julia"),
        steps.ShellCommand(
            name="fix permissions",
            command=["find", "/opt/julia-"+version, "(", "-type", "f", "-or", "-type", "d", ")",
                     "-exec", "chmod", "o=u-w,g=u-w", "{}", "+"],
            locks=[io_lock.access('counting')])
    ])


    ## finish

    f.addSteps([
        steps.ShellCommand(
            name="save srccache",
            command=["rsync", "--archive", "--verbose",
                     "--min-size=100K", "--exclude", "/*/*/",
                     "deps/srccache", "/mnt/storage/buildbot/workers/julia"],
            locks=[io_lock.access('counting')],
            workdir="julia")
    ])

    if len(triggerables) > 0:
        f.addStep(
            steps.Trigger(
                schedulerNames=triggerables,
                alwaysUseLatest=True)
        )

    return f

# Steps to build and test a package
def build_package(package, julia_version, extra_env={}):
    f = util.BuildFactory()

    # TODO: these builders can start with a clean slate,
    #       can we do so instead of manually removing old dirs?


    ## julia

    julia_bin = "/opt/julia-" + julia_version + "/usr/bin/julia"

    f.addSteps([
        steps.ShellCommand(
            name="dump Julia version info",
            command=[julia_bin, "--eval", 'versioninfo()'],
            workdir="julia")
    ])


    ## package

    package_env = generic.merge(
        {"JULIA_PKGDIR":    util.Interpolate("%(prop:builddir)s/packages")},
        extra_env
    )

    f.addSteps([
        steps.RemoveDirectory(
            name="remove packages",
            locks=[io_lock.access('counting')],
            dir="packages"),
        steps.ShellCommand(
            name="initialize package manager",
            command=[julia_bin, "--eval", 'Pkg.init()'],
            env=package_env,
            workdir="julia"),
        steps.SetPropertyFromCommand(
            name="get package directory",
            command=[julia_bin, "--eval", "println(Pkg.dir())"],
            property='pkgdir',
            env=package_env,
            workdir="julia"),
        steps.Git(
            name="checkout",
            repourl=getRepositoryURL(package),
            codebase=package,
            workdir=util.Interpolate("%(prop:pkgdir)s/" + package),
            haltOnFailure=True),
        steps.ShellCommand(
            name="resolve",
            command=[julia_bin, "--eval", 'Pkg.resolve()'],
            env=package_env,
            workdir="julia"),
        steps.ShellCommand(
            # FIXME: might trigger rebuild of dependency, already build by `resolve`
            name="build",
            command=[julia_bin, "--eval", 'Pkg.build("%s")'%package],
            env=package_env,
            workdir="julia"),
        steps.ShellCommand(
            name="test",
            command=[julia_bin, "--eval", 'Pkg.test("%s", coverage=true)'%package],
            env=package_env,
            workdir="julia")
    ])


    ## coverage

    if package in private.codecov:
        f.addSteps([
            steps.ShellCommand(
                name="install Coverage.jl",
                command=[julia_bin, "--eval", 'Pkg.add("Coverage")'],
                env=package_env,
                workdir="julia",
                haltOnFailure=True,
                flunkOnFailure=False),
            steps.ShellCommand(
                name="submit coverage",
                command=[julia_bin, "--eval",
                         'cd(Pkg.dir("%s")); using Coverage; Codecov.submit_local(process_folder())'%package],
                env=generic.merge({ "CODECOV_TOKEN": private.codecov[package] },
                                  package_env),
                workdir="julia",
                flunkOnFailure=False)
        ])


    return f


# Steps to build and test Julia using ASAN
def build_julia_asan(llvm=None, cores=16):
    f = util.BuildFactory()


    ## prepare

    f.addSteps([
        steps.Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='full',
            method='fresh',
            codebase="Julia",
            workdir="julia"),
        steps.SetPropertyFromCommand(
            name="get commit name",
            command="contrib/commit-name.sh",
            property="commit_name",
            workdir="julia"),

        steps.ShellCommand(
            name="restore srccache",
            command=["rsync", "--archive", "--verbose",
                     "/mnt/storage/buildbot/workers/julia/srccache", "deps"],
            locks=[io_lock.access('counting')],
            workdir="julia",
            flunkOnFailure=False),
    ])


    ## toolchain

    toolchain_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes"
    }
    toolchain_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",
        "FC":               "/usr/local/lib/ccache/bin/gfortran",

        "BUILD_LLVM_CLANG": "1",

        # ASAN isn't built with autotools...
        "LLVM_USE_CMAKE":   "1",
        # ... but that triggers LLVM bug #23649
        "USE_LLVM_SHLIB":   "0",
    }
    if llvm is not None:
        toolchain_config["LLVM_VER"] = llvm

    f.addSteps([
        steps.ShellCommand(
            name="configure toolchain",
            command=["make", "O=toolchain", "configure"],
            env=toolchain_env,
            workdir="julia"),
        steps.StringDownload(
            name="configure toolchain",
            s=generic.MakeUser(toolchain_config),
            workerdest="Make.user",
            workdir="julia/toolchain",
            haltOnFailure=True),
        steps.ShellCommand(
            name="compile toolchain",
            command=["make", "-j", str(cores), "install-llvm"],
            env=toolchain_env,
            workdir="julia/toolchain/deps",
            haltOnFailure=True),
        steps.ShellCommand(
            name="fix toolchain",
            command="mv usr/bin/* usr/tools",
            workdir="julia/toolchain",
            flunkOnFailure=False),
    ])


    ## build

    # ASAN options for running Julia (build & test)
    asan_options = {
        "allow_user_segv_handler":  "1",
        "detect_leaks":             "0",

        # Memory-saving options from "Fast memory debugger for large software projects"
        # http://injoit.org/index.php/j1/article/viewFile/231/184
        "malloc_context_size":      "2",
        "fast_unwind_on_malloc":    "0",
        #"quarantine_size_mb":       "64"   # 1<<6, ASAN_LOW_MEMORY default
        # TODO: also redzone=32?
    }
    asan_options_str = ':'.join("%s=%s" % (key,value) for key,value in asan_options.items())

    # environment variables
    julia_env = {
        "VERBOSE":                  "1",
        "CCACHE_CPP2":              "yes",
        "JULIA_CPU_CORES":          str(cores),

        "ASAN_OPTIONS":             asan_options_str,
        "ASAN_SYMBOLIZER_PATH":     util.Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/llvm-symbolizer")
    }

    # Make.user
    julia_config = {
        "USECLANG":                 "1",
        "CC":                       util.Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/clang"),
        "CXX":                      util.Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/clang++"),

        # autotools doesn't have a self-sanitize mode
        "LLVM_USE_CMAKE":           "1",

        "SANITIZE":                 "1",
        "LLVM_SANITIZE":            "1",

        "WITH_GC_DEBUG_ENV":        "1",
        "JULIA_BUILD_MODE":         "debug",
    }
    if llvm is not None:
        julia_config["LLVM_VER"] = llvm

    f.addSteps([
        steps.ShellCommand(
            name="configure Julia",
            command=["make", "O=build", "configure"],
            env=toolchain_env,
            workdir="julia"),
        steps.StringDownload(
            name="configure Julia",
            s=generic.MakeUser(julia_config),
            workerdest="Make.user",
            workdir="julia/build",
            haltOnFailure=True),
        steps.ShellCommand(
            name="compile Julia",
            command=["make", "-j", str(cores)],
            env=julia_env,
            workdir="julia/build",
            haltOnFailure=True),
        steps.ShellCommand(
            name="test Julia",
            command=["make", "testall"],
            timeout=7200,
            env=julia_env,
            workdir="julia/build",
            haltOnFailure=True)
    ])


    ## finish

    f.addSteps([
        steps.ShellCommand(
            name="save srccache",
            command=["rsync", "--archive", "--verbose",
                     "--min-size=100K", "--exclude", "/*/*/",
                     "deps/srccache", "/mnt/storage/buildbot/workers/julia"],
            locks=[io_lock.access('counting')],
            workdir="julia")
    ])


    return f


####### BUILD CONFIGURATIONS & SCHEDULERS

c['builders'] = []

from random import randint
from collections import defaultdict


## packages

default_matrix = {
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { }
    },
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    }
}

# check whether a branch is part of a pull request
def is_pr(branch):
    return branch.startswith('refs/pull/')

# we're using system-wide Julia builds, so we need to take care to take exclusive access
# when installing, and a regular counting lock when consuming
class LockDict(dict):
    def __missing__(self, version):
        lock = self[version] = util.MasterLock("Julia " + version, maxCount=999)
        return lock
julia_locks = LockDict()

julia_triggerables = defaultdict(list)
def schedule_package(package, repo_url, matrix=default_matrix, github=None):
    """Create build configuration and schedule builds for a Julia package.

    Arguments:
    package -- name of the package (see `repositories`)
    julia_versions -- list of Julia versions to build against (see `julia_versions`)
    build_environments -- dict of build environments, `name: {env vars...}`
    """

    # save the repository
    global repositories
    if package not in repositories:
        repositories[package] = (repo_url, None)

    # provide GitHub repo details as build properties
    properties = {}
    if github is not None:
        owner, name = github.split('/')
        properties["github_repo_owner"] = owner
        properties["github_repo_name"] = name

    # instantiate build configurations
    ci_buildconfigs = defaultdict(list)
    master_buildconfigs = defaultdict(list)
    for name, conf in matrix.items():
        julia_lock = julia_locks[conf['julia']]

        for arch, worker in configurations.items():
            config = "%s (%s)"%(name, arch)

            # CI builders are used to build commits on request (ie. pull requests)
            builder = '%s.jl CI: %s'%(package,config)
            c['builders'].append(
                util.BuilderConfig(
                    name=builder,
                    tags=[package, "ci"],
                    workernames=[worker],
                    locks=[julia_lock.access("counting")],
                    factory=build_package(package, conf['julia'], conf['env']),
                    properties=generic.merge({'github_status_context': config}, properties)
                )
            )
            ci_buildconfigs[conf['julia']].append(builder)

            # the master branch builder cannot be forced, and is used for badges etc.
            builder = '%s.jl: %s'%(package,config)
            c['builders'].append(
                util.BuilderConfig(
                    name=builder,
                    tags=[package],
                    workernames=[worker],
                    locks=[julia_lock.access("counting")],
                    factory=build_package(package, conf['julia'], conf['env']),
                    properties=generic.merge({'github_status_context': config}, properties)
                )
            )
            master_buildconfigs[conf['julia']].append(builder)

    # CI builders are triggered by commits on PR branches (notified through a web hook)
    ci_builders = [builder for builders in ci_buildconfigs.values() for builder in builders]
    c['schedulers'].append(
        schedulers.AnyBranchScheduler(
            name="%s.jl (change monitor)"%package,
            builderNames=ci_builders,
            codebases=getCodebases([package]),
            change_filter=util.ChangeFilter(branch_fn=is_pr),
        )
    )

    # The master branch builders are triggered by commits on the master branch,
    # and by Julia updates
    # FIXME: master branch commits (from the webhook) don't seem to trigger this scheduler?
    #        as a workaround (to keep badges fresh), I've added a Nightly and ForceScheduler
    master_builders = [builder for builders in master_buildconfigs.values() for builder in builders]
    c['schedulers'].extend([
        schedulers.AnyBranchScheduler(
            name="%s.jl (master branch change monitor)"%package,
            builderNames=master_builders,
            codebases=getCodebases([package]),
            change_filter=util.ChangeFilter(branch="master"),
        ),
        schedulers.ForceScheduler(
            name="force-%s"%package,
            builderNames=master_builders,
            codebases=[util.CodebaseParameter(
                codebase=package,
                # configurable settings: none
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            )],
            # disabled settings (default value)
            reason=util.FixedParameter(name="reason", default=""),
            buttonName="Force",
            properties=[]),
    ])
    for julia_version, builders in master_buildconfigs.items():
        name = "%s.jl after Julia %s update"%(package,julia_version)
        c['schedulers'].append(
            schedulers.Triggerable(
                name=name,
                builderNames=builders,
                codebases=getCodebases([package])
            )
        )
        julia_triggerables[julia_version].append(name)

schedule_package("LLVM", "https://github.com/maleadt/LLVM.jl", github="maleadt/LLVM.jl", matrix={
    # Julia 0.5 ships LLVM 3.7
    'Julia 0.5, system LLVM 3.9': {
        'julia': '0.5',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1' }
    },
    # Julia 0.6 ships LLVM 3.9
    # this is the current stable version, so test thoroughly (DEBUG enables extra checks)
    'Julia 0.6, embedded LLVM': {
        'julia': '0.6',
        'env':   { }
    },
    'Julia 0.6, embedded LLVM, debug': {
        'julia': '0.6',
        'env':   { 'DEBUG': '1' }
    },
    'Julia 0.6, system LLVM 3.9': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.6, system LLVM 3.9, debug': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1',
                   'DEBUG': '1' }
    },
    'Julia 0.6, system LLVM 4.0': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.6, system LLVM 4.0, debug': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1',
                   'DEBUG': '1' }
    },
    'Julia 0.6, system LLVM 5.0': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '5.0', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.6, system LLVM 5.0, debug': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '5.0', 'USE_SYSTEM_LLVM': '1',
                   'DEBUG': '1' },
    },
    # Julia master currently ships LLVM 3.9
    'Julia master, embedded LLVM': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("CUDAdrv", "https://github.com/JuliaGPU/CUDAdrv.jl", github="JuliaGPU/CUDAdrv.jl", matrix={
    # Julia 0.5
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { }
    },
    # Julia 0.6
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("CUDArt", "https://github.com/JuliaGPU/CUDArt.jl", github="JuliaGPU/CUDArt.jl")

schedule_package("CUDAnative", "https://github.com/JuliaGPU/CUDAnative.jl", github="JuliaGPU/CUDAnative.jl", matrix={
    # Julia 0.6
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("CUDAnativelib", "https://github.com/JuliaGPU/CUDAnativelib.jl", github="JuliaGPU/CUDAnativelib.jl", matrix={
    # Julia 0.6
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("GPUArrays", "https://github.com/JuliaGPU/GPUArrays.jl", github="JuliaGPU/GPUArrays.jl")

schedule_package("CUFFT", "https://github.com/JuliaGPU/CUFFT.jl", github="JuliaGPU/CUFFT.jl")

schedule_package("CUBLAS", "https://github.com/JuliaGPU/CUBLAS.jl", github="JuliaGPU/CUBLAS.jl")

schedule_package("CUSPARSE", "https://github.com/JuliaGPU/CUSPARSE.jl", github="JuliaGPU/CUSPARSE.jl")

schedule_package("CUSOLVER", "https://github.com/kshyatt/CUSOLVER.jl", github="JuliaGPU/CUSOLVER.jl")

schedule_package("CLBLAS", "https://github.com/JuliaGPU/CLBLAS.jl", github="JuliaGPU/CLBLAS.jl")

schedule_package("OpenCL", "https://github.com/JuliaGPU/OpenCL.jl", github="JuliaGPU/OpenCL.jl")

schedule_package("GLVisualize", "https://github.com/JuliaGL/GLVisualize.jl", github="JuliaGL/GLVisualize.jl", matrix={
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { 'CI': 'true' }
    },
})


## julia

# NOTE: this must happen after scheduling package builds,
#       because it schedules a Trigger which needs to know about the Triggerables
julia_versions = {
    'master': 'master',
    '0.5':    'release-0.5',
    '0.6':    'release-0.6'
}
for version, branch in julia_versions.items():
    julia_lock = julia_locks[version]

    # instantiate build configurations
    julia_builders = []
    for arch, worker in configurations.items():
        name = "Julia %s (%s)"%(version, arch)
        c['builders'].append(
            util.BuilderConfig(
                name=name,
                tags=["Julia"],
                workernames=[worker],
                locks=[julia_lock.access('exclusive')],
                factory=build_julia(version, julia_triggerables[version])
            )
        )
        julia_builders.append(name)

    # set-up schedulers starting these build configurations
    c['schedulers'].extend([
        schedulers.SingleBranchScheduler(
            name="Julia %s (change monitor)"%version,
            builderNames=julia_builders,
            codebases=getCodebases(['Julia']),
            change_filter=util.ChangeFilter(branch=branch)
        ),
        schedulers.ForceScheduler(
            name="force-julia%s"%version.replace('.', ''),
            builderNames=julia_builders,
            codebases=[util.CodebaseParameter(
                codebase='Julia',
                # configurable settings: revision
                # disabled settings (specific value)
                branch=util.FixedParameter(name="branch", default=branch),
                # disabled settings (default value)
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            )],
            # disabled settings (default value)
            reason=util.FixedParameter(name="reason", default=""),
            buttonName="Force",
            properties=[])
    ])

# manage ASAN builds of Julia
julia_asan_builders = []
for arch, worker in configurations.items():
    name = "Julia with ASAN (%s)"%(arch)
    c['builders'].append(
        util.BuilderConfig(
            name=name,
            tags=["Julia"],
            workernames=[worker],
            factory=build_julia_asan()
        )
    )
    julia_asan_builders.append(name)
c['schedulers'].extend([
    schedulers.ForceScheduler(
        name="force-julia-asan",
        builderNames=julia_asan_builders,
        codebases=[util.CodebaseParameter(
            codebase='Julia',
            # configurable settings: branch, revision
            # disabled settings (default value)
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
        )],
        # disabled settings (default value)
        reason=util.FixedParameter(name="reason", default=""),
        buttonName="Force",
        properties=[])
])



####### CODEBASES pt. 2

## codebase generator

repo_urls = {}
for repo,v in repositories.items():
    repo_urls[v[0]] = repo

    # sometimes, the repo is suffixed with .git...
    repo_urls["%s.git"%v[0]] = repo


def codebaseGenerator(chdict):
    return repo_urls[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Detect the appropriate codebase from a GitHub-submitted payload
def detect_codebase(payload):
    url = payload['repository']['url']

    for repo in repositories:
        if url == getRepositoryURL(repo):
            return repo

    return None

auth = util.GitHubAuth(private.github['client_id'], private.github['client_secret'])

authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role="JuliaGPU")
    ],
    roleMatchers=[
        util.RolesFromGroups()
    ]
)

c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': {},
        'console_view': {}
    },
    'auth': auth,
    'authz': authz,
    'change_hook_dialects': {
        'github': {
            'secret': private.github['webhook'],
            'strict': True,
            'codebase': detect_codebase
        }
    }
}



####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

gs = reporters.GitHubStatusPush(
    token=private.github['api_token'],
    context=util.Interpolate("%(prop:github_status_context)s"),
    repoOwner=util.Interpolate("%(prop:github_repo_owner)s"),
    repoName=util.Interpolate("%(prop:github_repo_name)s"))

c['services'].append(gs)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Julia"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://ci.maleadt.net:8010/"

c['buildbotNetUsageData'] = 'basic'



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
