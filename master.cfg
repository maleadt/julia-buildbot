# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### LOCKS

from buildbot.locks import SlaveLock

# Dictionary with locks to be consumed by different builders
locks = {}

# A global activity lock which restricts the amount of concurrent load per slave
locks['activity'] = SlaveLock('activity',
    maxCountForSlave = {
        'hydor.elis.ugent.be':      4
    }
)



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from passwords import passwd
c['slaves'] = [
    BuildSlave('hydor.elis.ugent.be',       passwd['hydor.elis.ugent.be'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}



####### CODEBASES

all_repositories = {
    r'https://github.com/JuliaLang/julia.git':          'Julia',
    r'https://github.com/JuliaGPU/julia.git':           'Julia+CUDA',
    r'https://github.com/JuliaGPU/CUDAnative.jl.git':   'CUDAnative.jl'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

# Get the URL of a certain repository
def getRepositoryURL(repository):
    all_urls = {all_repositories[k] : k for k in all_repositories}
    return all_urls[repository]

# Return the codebases dictionary to be passed to schedulers
def getCodebases(repositories):
    if isinstance(repositories, basestring):
        if repositories == "all":
            repositories = ['Julia', 'Julia+CUDA', 'CUDAnative.jl']
        else:
            error("unknown repository group '%s'" % repositories)

    codebases = {}
    for repository in repositories:
        codebases[repository] = { 'repository': getRepositoryURL(repository)}
    return codebases



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

# NOTE: no need to list Julia here, as we do an unconditional nightly
# build.

# TODO: DO list Julia, and do an ASAN build for every commit

c['change_source'] = [
    GitPoller(getRepositoryURL('Julia'),      branch='master',  pollInterval=5*60),
    GitPoller(getRepositoryURL('Julia+CUDA'), branch='tb/cuda', pollInterval=5*60),
    GitPoller(getRepositoryURL('CUDAnative.jl'),                pollInterval=5*60)
]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.changes import filter

c['schedulers'] = []


# Time-based schedulers

from buildbot.schedulers.timed import Nightly

# Build upstream code every day
c['schedulers'].append(Nightly(
        name = "Julia",
        change_filter = filter.ChangeFilter(
            branch = 'master',
            codebase = 'Julia'),
        codebases = getCodebases(['Julia']),
        branch = 'master',
        hour = 7,
        builderNames = [ "Julia on Linux 64-bit", #"Julia on Linux 32-bit",
                       ]
    )
)


# Change-based schedulers

from buildbot.schedulers.basic import SingleBranchScheduler

# Perform a basic build+test for each group of commits we detect
c['schedulers'].append(SingleBranchScheduler(
        name="Julia+CUDA",
        change_filter = filter.ChangeFilter(
            # TODO: filter on branches, master & tb/cuda
            codebase = ['Julia+CUDA', 'CUDAnative.jl']),
        treeStableTimer = 2*60,
        codebases = getCodebases(['Julia+CUDA', 'CUDAnative.jl']),
        builderNames = [ "Julia+CUDA on Linux 64-bit", #"Julia+CUDA on Linux 32-bit",
                         "Julia+CUDA documentation" ]
    )
)

# Perform an ASAN build for every commit (in order to spot defects)
c['schedulers'].append(SingleBranchScheduler(
        name="Julia+ASAN",
        change_filter = filter.ChangeFilter(
            branch = 'master',
            codebase = 'Julia'),
        codebases = getCodebases(['Julia']),
        builderNames = [ "Julia+ASAN on Linux 64-bit", #"Julia+ASAN on Linux 32-bit",
                       ]
    )
)


# User-controlled schedulers

from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'].append(ForceScheduler(
        name = "force Julia",
        codebases = getCodebases(['Julia']),
        builderNames = [ "Julia on Linux 64-bit", #"Julia on Linux 32-bit",
                         "Julia+ASAN on Linux 64-bit" ]
    )
)

c['schedulers'].append(ForceScheduler(
        name = "force Julia+CUDA",
        # TODO: do we need to specify branches here?
        codebases = getCodebases(['Julia+CUDA', 'CUDAnative.jl']),
        builderNames = [ "Julia+CUDA on Linux 64-bit", #"Julia+CUDA on Linux 32-bit",
                         "Julia+CUDA documentation" ]
    )
)



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, WithProperties
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import FileUpload
from generic import FileCreate
import generic

make_env = {
    "VERBOSE":      "1",
    "LSAN_OPTIONS": "exitcode=0"
}

# Steps to build and test upstream Julia
upstream_config = { }
factory_upstream = BuildFactory()
factory_upstream.addSteps([
    Git(
        name="checkout",
        repourl=getRepositoryURL("Julia"),
        codebase="Julia",
        mode='incremental'),
    FileCreate(
        name="configure",
        data=generic.strMakeUser(upstream_config),
        slavedest="Make.user"),
    ShellCommand(
        name="clean",
        command=["make", "cleanall"],
        env=make_env),
    ShellCommand(
        name="compile",
        command=["make"],
        env=make_env,
        haltOnFailure = True),
    ShellCommand(
        name="test",
        command=["make", "testall1"],
        env=make_env)
])

# Steps to verify our build environment on upstream Julia
asan_config = {
    "USECLANG":                 "1",
    "USECCACHE":                "1",

    "OPENBLAS_DYNAMIC_ARCH":    "0",

    "SANITIZE":                 "1"
}
factory_asan = BuildFactory()
factory_asan.addSteps([
    Git(
        name="checkout",
        repourl=getRepositoryURL("Julia"),
        codebase="Julia",
        mode='incremental'),
    FileCreate(
        name="configure",
        data=generic.strMakeUser(asan_config),
        slavedest="Make.user"),
    ShellCommand(
        name="clean",
        command=["make", "cleanall"],
        env=make_env),
    ShellCommand(
        name="compile",
        command=["make"],
        env=make_env,
        haltOnFailure = True)
])

# Steps to build and test our main development tree
# TODO: test multiple LLVM versions?
main_config = {
    "OPENBLAS_DYNAMIC_ARCH":    "0" # TODO: why?
}
def JuliaCUDA_changed(step):
    all_changes = 0
    for k, v in step.build.requests[0].sources.items():
        all_changes += len(v.changes)
    return all_changes == 0 or len(step.build.requests[0].sources['Julia+CUDA'].changes) > 0
factory_master = BuildFactory()
factory_master.addSteps([
    Git(
        name="checkout",
        doStepIf=JuliaCUDA_changed,
        repourl=getRepositoryURL("Julia+CUDA"),
        codebase="Julia+CUDA",
        mode='incremental'),
    Git(
        name="checkout",
        repourl=getRepositoryURL("CUDAnative.jl"),
        codebase="CUDAnative.jl",
        workdir="CUDAnative.jl",
        mode='full'),
    FileCreate(
        name="configure",
        doStepIf=JuliaCUDA_changed,
        data=generic.strMakeUser(main_config),
        slavedest="Make.user"),
    ShellCommand(
        name="clean julia",
        doStepIf=JuliaCUDA_changed,
        command=["make", "cleanall"],
        env=make_env),
    RemoveDirectory(
        name="clean packages",
        dir="packages"),
    ShellCommand(
        name="compile",
        doStepIf=JuliaCUDA_changed,
        command=["make"],
        env=make_env,
        haltOnFailure = True),
    ShellCommand(
        name="test julia",
        doStepIf=JuliaCUDA_changed,
        command=["make", "testall1"],
        env=make_env),
    ShellCommand(
        name="initialize packages",
        command=["./julia", "-e", 'Pkg.init(); Pkg.clone(abspath("../CUDAnative.jl"))'],
        env=generic.merge(
            { "JULIA_PKGDIR": WithProperties("%(builddir)s/packages") },
            make_env)),
    ShellCommand(
        name="test CUDAnative.jl",
        command=["./julia", "-e", 'Pkg.test("CUDAnative")'],
        env=generic.merge(
            { "JULIA_PKGDIR": WithProperties("%(builddir)s/packages") },
            make_env))
])

# Steps to generate documentation for the main development tree
factory_docs = BuildFactory()
factory_docs.addSteps([
    Git(
        name="checkout",
        repourl=getRepositoryURL("Julia+CUDA"),
        codebase="Julia+CUDA",
        mode='incremental'),
    Git(
        name="checkout",
        repourl=getRepositoryURL("CUDAnative.jl"),
        codebase="CUDAnative.jl",
        workdir="CUDAnative.jl",
        mode='full'),
    ShellCommand(
        name="clean julia docs",
        workdir="build/doc",
        command=["make", "cleanall"]),
    ShellCommand(
        name="generate julia docs",
        workdir="build/doc",
        command=["make", "html"]),
    ShellCommand(
        name="package julia docs",
        workdir="build/doc/_build/html",
        command=["tar", "-cvf", "../julia.tar", "."]),
    FileUpload(
        name="upload julia docs",
        slavesrc="doc/_build/julia.tar",
        masterdest="/tmp/julia.tar"),
    MasterShellCommand(
        name="clean deployed docs",
        command=["rm", "-rf", "/var/www/julia/docs/julia"]),
    MasterShellCommand(
        name="prepare deployment",
        command=["mkdir", "/var/www/julia/docs/julia"]),
    MasterShellCommand(
        name="deploy julia docs",
        command=["tar", "-xvf", "/tmp/julia.tar", "-C", "/var/www/julia/docs/julia"]),
    MasterShellCommand(
        name="fix directory permissions",
        command=["find", "/var/www/julia/docs/julia", "-type", "d", "-exec",
                 "chmod", "775", "{}", ";"]),
    MasterShellCommand(
        name="fix file permissions",
        command=["find", "/var/www/julia/docs/julia", "-type", "f", "-exec",
                 "chmod", "664", "{}", ";"]),
    MasterShellCommand(
        name="clean leftovers",
        alwaysRun=True,
        command=["rm", "/tmp/julia.tar"])
])


# Build configurations

from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].extend([
    BuilderConfig(
        name="Julia on Linux 64-bit",
        category="upstream",
        slavenames=["hydor.elis.ugent.be"],
        factory=factory_upstream
    ),
    # BuilderConfig(
    #     name="Julia on Linux 32-bit",
    #     category="upstream",
    #     slavenames=["marsupilami"],
    #     factory=factory_upstream
    # )
])

c['builders'].extend([
    BuilderConfig(
        name="Julia+ASAN on Linux 64-bit",
        category="upstream",
        slavenames=["hydor.elis.ugent.be"],
        factory=factory_asan
    )
])

c['builders'].extend([
    BuilderConfig(
        name="Julia+CUDA on Linux 64-bit",
        category="development",
        slavenames=["hydor.elis.ugent.be"],
        factory=factory_master
    ),
    # BuilderConfig(
    #     name="Julia+CUDA on Linux 32-bit",
    #     category="development",
    #     slavenames=["marsupilami"],
    #     factory=factory_master
    # ),
    BuilderConfig(
        name="Julia+CUDA documentation",
        category="development",
        slavenames=["hydor.elis.ugent.be"],
        factory=factory_docs
    )
])



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(
        http_port="tcp:8011:interface=127.0.0.1",
        authz=authz_cfg
    )
)

import slack
slack_notifier = slack.SlackStatusPush("https://hooks.slack.com/services/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",
                                       False, "buildbot", "https://a.fsdn.com/allura/p/buildbot/icon")
c['status'].append(slack_notifier)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Julia"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://hydor.elis.ugent.be/julia/buildbot/"



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
