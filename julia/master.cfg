# -*- python -*-
# ex: set syntax=python:

import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, "common"))

import passwords

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave('hydor.elis.ugent.be', passwords.buildslaves['hydor.elis.ugent.be'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9987}}

configurations = {
    'x86-64': 'hydor.elis.ugent.be'
}



####### CODEBASES

## repository database with URLs and default branches

repositories = {
    'Julia':         (r'https://github.com/JuliaLang/julia',           None),
    'LLVM':          (r'https://github.com/maleadt/LLVM.jl',           None),
    'CUDAdrv':       (r'https://github.com/JuliaGPU/CUDAdrv.jl',       None),
    'CUDAnative':    (r'https://github.com/JuliaGPU/CUDAnative.jl',    None),
    'CUDAnativelib': (r'https://github.com/JuliaGPU/CUDAnativelib.jl', None),
    'GLVisualize':   (r'https://github.com/JuliaGL/GLVisualize.jl',    None),
}

# Get the URL of a certain repository
def getRepositoryURL(repo):
    return repositories[repo][0]

# Get the default branch of a certain repository
def getRepositoryBranch(repo):
    return repositories[repo][1]


## codebase generator

repo_urls = {}
for repo,v in repositories.items():
    repo_urls[v[0]] = repo

def codebaseGenerator(chdict):
    return repo_urls[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator


## codebase dict for schedulers

def getCodebases(repositories, branches={}):
    # build the codebases dict
    codebases = {}
    for repo in repositories:
        url = getRepositoryURL(repo)
        branch = getRepositoryBranch(repo)

        # allow overriding the selected branch
        if repo in branches:
            branch = branches[repo]

        codebases[repo] = { 'repository': url,
                            'branch':     branch}
    return codebases



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
import re

c['change_source'] = [
    # package repositories are handled through a webhook
    GitPoller(getRepositoryURL('Julia'),      branches=True, pollInterval=5*60)
]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.changes import filter

c['schedulers'] = []




####### BUILD FACTORIES

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.plugins import steps
from generic import FileCreate
import generic

# TODO: encode slave's `/mnt/storage/buildslave` in its `buildbot.tac`?

# Steps to build and deploy Julia
def build_julia(version, llvm=None, debug=False, cores=16):
    f = BuildFactory()


    ## build

    # environment variables
    julia_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes",
        "JULIA_CPU_CORES":  str(cores)
    }

    # Make.user
    julia_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",

        "LLVM_ASSERTIONS":  "1"
    }
    if llvm != None:
        julia_config["LLVM_VER"] = llvm

    f.addSteps([
        Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='full',
            method='fresh',
            codebase="Julia",
            workdir="julia"),
        SetPropertyFromCommand(
            name="get commit name",
            command="contrib/commit-name.sh",
            property="commit_name",
            workdir="julia"),

        ShellCommand(
            name="restore srccache",
            command=["rsync", "--archive", "--verbose",
                     "/mnt/storage/buildbot/slaves/julia/srccache", "deps"],
            workdir="julia",
            flunkOnFailure=False),

        FileCreate(
            name="configure Julia",
            data=generic.strMakeUser(julia_config),
            slavedest="Make.user",
            workdir="julia",
            haltOnFailure=True),
        ShellCommand(
            name="compile Julia",
            command=["make", "-j", str(cores)],
            env=julia_env,
            workdir="julia",
            haltOnFailure = True),
        ShellCommand(
            name="test Julia",
            command=["make", "testall"],
            env=julia_env,
            workdir="julia",
            haltOnFailure = True),

        ShellCommand(
            name="save srccache",
            command=["rsync", "--archive", "--verbose", "--exclude", "/*/*/",
                     "deps/srccache", "/mnt/storage/buildbot/slaves/julia"],
            workdir="julia")
    ])


    ## package

    f.addSteps([
        ShellCommand(
            name="prepare packaging",
            command=["mkdir", "-p", Interpolate("julia/" + version)],
            workdir="/mnt/storage/buildbot/slaves")
    ])

    if version == 'master':
        # NOTE: current master doesn't install `llvm-config`, so just tar up the build tree
        f.addSteps([
            ShellCommand(
                name="package Julia",
                command=["tar", "--create", "--verbose", "--file",
                         Interpolate("/mnt/storage/buildbot/slaves/julia/" + version + "/julia-%(prop:commit_name)s.tar"),
                         "."],
                workdir="julia/usr",
                haltOnFailure = True)
        ])
    else:
        # NOTE: on 0.5 this results in a dist without `llvm-config`, but it's LLVM 3.7 anyway
        # FIXME: make sure 1.0 installs `llvm-config`
        f.addSteps([
            SetPropertyFromCommand(
                name="get commit hash",
                command=["git", "rev-parse", "--short=10", "HEAD"],
                property="commit_hash",
                workdir="julia"),
            ShellCommand(
                name="install Julia",
                command=["make", "-j", str(cores), "install"],
                env=julia_env,
                workdir="julia",
                haltOnFailure = True),
            ShellCommand(
                name="package Julia",
                command=["tar", "--create", "--verbose", "--file",
                         Interpolate("/mnt/storage/buildbot/slaves/julia/" + version + "/julia-%(prop:commit_name)s.tar"),
                         "."],
                workdir=Interpolate("julia/julia-%(prop:commit_hash)s"),
                haltOnFailure = True),
        ])

    f.addSteps([
        ShellCommand(
            name="publish",
            command=["ln", "--symbolic", "--force",
                     Interpolate("julia-%(prop:commit_name)s.tar"), "latest.tar"],
            workdir=Interpolate("/mnt/storage/buildbot/slaves/julia/" + version)),
        steps.Trigger(
            # NOTE: the scheduler endpoint will be defined at the very end
            schedulerNames=["Julia %s dependent builds"%version],
            alwaysUseLatest=True,
            set_properties={ 'quick' : False },
            copy_properties=[ 'release_code_name' ])
    ])

    return f

# Steps to build and test a package
def build_package(package, julia_version, extra_env={}):
    f = BuildFactory()

    # TODO: these builders can start with a clean slate,
    #       can we do so instead of manually removing old dirs?


    ## julia

    f.addSteps([
        RemoveDirectory(
            name="remove Julia",
            dir="julia"),
        ShellCommand(
            name="prepare deployment",
            command=["mkdir", "julia"],
            workdir="."),
        ShellCommand(
            name="deploy Julia %s"%julia_version,
            command=["tar", "--extract", "--verbose", "--file",
                     Interpolate("/mnt/storage/buildbot/slaves/julia/"+julia_version+"/latest.tar")],
            workdir="julia",
            haltOnFailure = True),
        ShellCommand(
            name="dump Julia version info",
            command=["bin/julia", "--eval", 'versioninfo()'],
            workdir="julia")
    ])


    ## package

    package_env = generic.merge(
        {"JULIA_PKGDIR":    Interpolate("%(prop:builddir)s/packages")},
        extra_env
    )

    f.addSteps([
        RemoveDirectory(
            name="remove packages",
            dir="packages"),
        ShellCommand(
            name="initialize package manager",
            command=["bin/julia", "--eval", 'Pkg.init()'],
            env=package_env,
            workdir="julia"),
        SetPropertyFromCommand(
            name="get package directory",
            command=["bin/julia", "--eval", "println(Pkg.dir())"],
            property='pkgdir',
            env=package_env,
            workdir="julia"),
        Git(
            name="checkout",
            repourl=getRepositoryURL(package),
            codebase=package,
            workdir=Interpolate("%(prop:pkgdir)s/" + package),
            haltOnFailure=True),
        ShellCommand(
            name="resolve",
            command=["bin/julia", "--eval", 'Pkg.resolve()'],
            env=package_env,
            workdir="julia"),
        ShellCommand(
            # FIXME: might trigger rebuild of dependency, already build by `resolve`
            name="build",
            command=["bin/julia", "--eval", 'Pkg.build("%s")'%package],
            env=package_env,
            workdir="julia"),
        ShellCommand(
            name="test",
            command=["bin/julia", "--eval", 'Pkg.test("%s", coverage=true)'%package],
            env=package_env,
            workdir="julia")
    ])


    ## coverage

    if package in passwords.codecov:
        f.addSteps([
            ShellCommand(
                name="install Coverage.jl",
                command=["bin/julia", "--eval", 'Pkg.add("Coverage")'],
                env=package_env,
                workdir="julia",
                haltOnFailure=True,
                flunkOnFailure=False),
            ShellCommand(
                name="submit coverage",
                command=["bin/julia", "--eval",
                         'cd(Pkg.dir("%s")); using Coverage; Codecov.submit_local(process_folder())'%package],
                env=generic.merge({ "CODECOV_TOKEN": passwords.codecov[package] },
                                  package_env),
                workdir="julia",
                flunkOnFailure=False)
        ])


    return f



####### BUILD CONFIGURATIONS & SCHEDULERS

c['builders'] = []

from buildbot.config import BuilderConfig
from buildbot.plugins import schedulers
from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler, CodebaseParameter, FixedParameter

# dict of Julia version => [builder names]
# indicating which packages should get rebuild when a new Julia version is released.
julia_dependent_builders = {}

# manage builds of Julia
julia_versions = {
    'master': 'master',
    '0.5':    'release-0.5'
}
for version, branch in julia_versions.iteritems():
    # instantiate build configurations
    julia_builders = []
    for arch, slave in configurations.iteritems():
        name = "Julia %s (%s)"%(version, arch)
        c['builders'].append(
            BuilderConfig(
                name=name,
                category="Julia",
                slavenames=[slave],
                factory=build_julia(version)
            )
        )
        julia_builders.append(name)

    # set-up schedulers starting these build configurations
    c['schedulers'].extend([
        SingleBranchScheduler(
            name="Julia %s change monitor"%version,
            builderNames = julia_builders,
            codebases = getCodebases(['Julia']),
            change_filter = filter.ChangeFilter(branch = branch)),
        # schedulers.Nightly(
        #     name="julia-%s"%version,
        #     builderNames=julia_builders,
        #     branch = branch,
        #     hour=7,
        #     minute=0),
        ForceScheduler(
            name = "Build Julia %s"%version,
            builderNames = julia_builders,
            codebases = [CodebaseParameter(
                codebase = 'Julia',
                # configurable settings: revision
                # disabled settings (specific value)
                branch = FixedParameter(name="branch", default=branch),
                # disabled settings (default value)
                repository = FixedParameter(name="repository", default=""),
                project = FixedParameter(name="project", default=""),
            )],
            # disabled settings (default value)
            reason = FixedParameter(name="reason", default=""),
            properties = [])
    ])

    julia_dependent_builders[version] = []

def schedule_package(package, matrix, github=None):
    """Create build configuration and schedule builds for a Julia package.

    Arguments:
    package -- name of the package (see `repositories`)
    julia_versions -- list of Julia versions to build against (see `julia_versions`)
    build_environments -- dict of build environments, `name: {env vars...}`
    """

    # provide GitHub repo details as build properties
    properties = {}
    if github != None:
        owner, name = github.split('/')
        properties["github_repo_owner"] = owner
        properties["github_repo_name"] = name

    # instantiate build configurations
    package_builders = []
    for name, conf in matrix.iteritems():
        for arch, slave in configurations.iteritems():
            name = "%s (%s)"%(name, arch)
            builder = '%s.jl: %s'%(package,name)
            c['builders'].append(
                BuilderConfig(
                    name=builder,
                    category=package,
                    slavenames=[slave],
                    factory=build_package(package, conf['julia'], conf['env']),
                    properties=generic.merge({'github_status_context': name}, properties)
                )
            )
            julia_dependent_builders[conf['julia']].append(builder)
            package_builders.append(builder)

    # set-up schedulers starting these build configurations
    c['schedulers'].extend([
        AnyBranchScheduler(
            name="%s.jl change monitor"%package,
            builderNames = package_builders,
            codebases = getCodebases([package]),
        ),
        ForceScheduler(
            name = "%s.jl forced build"%package,
            builderNames = package_builders,
            codebases = [CodebaseParameter(
                codebase = package,
                # configurable settings: branch, revision
                # disabled settings (default value)
                repository = FixedParameter(name="repository", default=""),
                project = FixedParameter(name="project", default=""),
            )],
            # disabled settings (default value)
            reason = FixedParameter(name="reason", default=""),
            properties = [])
    ])

# manage builds of LLVM.jl
llvm_matrix = {
    # Julia 0.5 ships LLVM 3.7 (but lacks `llvm-config`)
    'Julia 0.5, system LLVM 3.9': {
        'julia': '0.5',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.5, system LLVM 3.9, debug': {
        'julia': '0.5',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1',
                   'TRACE': '1' }
    },
    'Julia 0.5, system LLVM 4.0': {
        'julia': '0.5',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.5, system LLVM 4.0, debug': {
        'julia': '0.5',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1',
                   'TRACE': '1' }
    },
    # Julia master ships LLVM 3.9
    'Julia master, embedded LLVM 3.9': {
        'julia': 'master',
        'env':   { }
    },
    'Julia master, embedded LLVM 3.9, debug': {
        'julia': 'master',
        'env':   { 'TRACE': '1' }
    },
    'Julia master, system LLVM 4.0': {
        'julia': 'master',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia master, system LLVM 4.0, debug': {
        'julia': 'master',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1',
                   'TRACE': '1' }
    },
}
schedule_package("LLVM", llvm_matrix, "maleadt/LLVM.jl")

# manage builds of CUDAdrv.jl
cudadrv_matrix = {
    # Julia 0.5
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { }
    },
    'Julia 0.5, debug': {
        'julia': '0.5',
        'env':   { 'TRACE': '1' }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
    'Julia master, debug': {
        'julia': 'master',
        'env':   { 'TRACE': '1' }
    },
}
schedule_package("CUDAdrv", cudadrv_matrix, "JuliaGPU/CUDAdrv.jl")

# manage builds of CUDAnative.jl
cudanative_matrix = {
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
    'Julia master, debug': {
        'julia': 'master',
        'env':   { 'TRACE': '1' }
    },
}
schedule_package("CUDAnative", cudanative_matrix, "JuliaGPU/CUDAnative.jl")

# manage builds of CUDAnativelib.jl
cudanativelib_matrix = {
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
}
schedule_package("CUDAnativelib", cudanativelib_matrix)

# manage builds of GLVisualize.jl
glvisualize_matrix = {
    # Julia 0.5
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
}
schedule_package("GLVisualize", glvisualize_matrix)

# manage julia build triggers
for version in julia_versions.keys():
    c['schedulers'].append(
        schedulers.Triggerable(
            name = "Julia %s dependent builds"%version,
            builderNames = julia_dependent_builders[version],
            # NOTE: this Triggerable contains _all_ codebases,
            #       depending on the Trigger to set alwaysUseLatest=True
            # TODO: this is a bit coarse
            codebases = getCodebases(repositories.keys()))
    )



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

# Detect the appropriate codebase from a GitHub-submitted payload
def detect_codebase(payload):
    url = payload['repository']['url']

    for repo in repositories:
        if url == getRepositoryURL(repo):
            return repo

    return None

authz_cfg = authz.Authz(
    useHttpHeader = True,
    httpLoginUrl = '/buildbot/login',
    auth = auth.HTPasswdAprAuth('/etc/apache2/users.conf'),

    # Totally disabled
    gracefulShutdown = False,
    pingBuilder = False,

    # Only for authenticated users
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
    pauseSlave = 'auth',
)
c['status'].append(html.WebStatus(
        http_port="tcp:8013:interface=127.0.0.1",
        authz=authz_cfg,
        change_hook_dialects={
            'github': {
                'secret': passwords.github['webhook'],
                'strict': True,
                'codebase': detect_codebase
            }
        }
    )
)

from github_status import GitHubStatus  # NOTE: hacked GitHubStatus with context support
c['status'].append(GitHubStatus(
    token = passwords.github['token'],
    context = Interpolate("%(prop:github_status_context)s"),
    repoOwner = Interpolate("%(prop:github_repo_owner)s"),
    repoName = Interpolate("%(prop:github_repo_name)s"),
    startDescription = 'Build in progress.',
    endDescription = 'Build has finished.')
)

if passwords.slackhook != None:
    import slack
    slack_notifier = slack.SlackStatusPush(passwords.slackhook,
                                           False, "buildbot", "https://a.fsdn.com/allura/p/buildbot/icon")
    c['status'].append(slack_notifier)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Julia"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ci.maleadt.net/buildbot/julia/"



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
