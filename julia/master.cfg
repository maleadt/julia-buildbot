# -*- python -*-
# ex: set syntax=python:

import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, "common"))

import passwords

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave('hydor.elis.ugent.be', passwords.buildslaves['hydor.elis.ugent.be'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9987}}

configurations = {
    'x86-64': 'hydor.elis.ugent.be'
}



####### CODEBASES

## repository database with URLs and default branches

repositories = {
    'Julia':        (r'https://github.com/JuliaLang/julia.git',         None),
    'LLVM':         (r'https://github.com/maleadt/LLVM.jl.git',         None),
    'CUDAdrv':      (r'https://github.com/JuliaGPU/CUDAdrv.jl.git',     None),
    'CUDAnative':   (r'https://github.com/JuliaGPU/CUDAnative.jl.git',  None),
}

# Get the URL of a certain repository
def getRepositoryURL(repo):
    return repositories[repo][0]

# Get the default branch of a certain repository
def getRepositoryBranch(repo):
    return repositories[repo][1]


## codebase generator

repo_urls = {}
for repo,v in repositories.items():
    repo_urls[v[0]] = repo

def codebaseGenerator(chdict):
    return repo_urls[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator


## codebase dict for schedulers

def getCodebases(repositories):
    if isinstance(repositories, basestring):
        if repositories == "all":
            repositories = ['Julia', 'LLVM', 'CUDAdrv', 'CUDAnative']
        else:
            raise(RuntimeError("unknown repository group '%s'" % repositories))

    codebases = {}
    for repo in repositories:
        codebases[repo] = { 'repository': getRepositoryURL(repo),
                            'branch':     getRepositoryBranch(repo)}
    return codebases



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
import re

c['change_source'] = [
    GitPoller(getRepositoryURL('Julia'),      branches=True, pollInterval=5*60),
    GitPoller(getRepositoryURL('LLVM'),       branches=True, pollInterval=5*60),
    GitPoller(getRepositoryURL('CUDAdrv'),    branches=True, pollInterval=5*60),
    GitPoller(getRepositoryURL('CUDAnative'), branches=True, pollInterval=5*60)
]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.changes import filter

c['schedulers'] = []




####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import FileUpload
from generic import FileCreate
import generic

# TODO: encode slave's `/mnt/storage/buildslave` in its `buildbot.tac`?

# Steps to build and deploy Julia
def build_julia(version, llvm=None, debug=False, cores=16):
    f = BuildFactory()


    ## build

    # environment variables
    julia_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes",
        "JULIA_CPU_CORES":  str(cores)
    }

    # Make.user
    julia_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",

        "LLVM_ASSERTIONS":  "1"
    }
    if llvm != None:
        julia_config["LLVM_VER"] = llvm

    f.addSteps([
        Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='incremental',
            codebase="Julia",
            workdir="julia"),
        SetPropertyFromCommand(
            name="get commit hash",
            command=["git", "rev-parse", "--short", "HEAD"],
            property="hash",
            workdir="julia"),

        ShellCommand(
            name="clean dependencies",
            command=["find", "deps/srccache", "-mindepth", "1", "-maxdepth", "1",
                                              "-not", "-name", "*.tar.*",
                             "-print", "-exec", "rm", "-rf", "{}", "+"],
            workdir="julia",
            flunkOnFailure=False),

        RemoveDirectory(
            name="clean Julia",
            dir="julia/build"),
        ShellCommand(
            name="prepare Julia",
            command=["make", "O=build", "configure"],
            env=julia_env,
            workdir="julia",
            haltOnFailure=True),
        FileCreate(
            name="configure Julia",
            data=generic.strMakeUser(julia_config),
            slavedest="Make.user",
            workdir="julia/build",
            haltOnFailure=True),
        ShellCommand(
            name="compile Julia",
            command=["make", "-j", str(cores)],
            env=julia_env,
            workdir="julia/build",
            haltOnFailure = True),
        ShellCommand(
            name="test Julia",
            command=["make", "testall"],
            env=julia_env,
            workdir="julia/build",
            haltOnFailure = True)
    ])


    ## package

    f.addSteps([
        ShellCommand(
            name="prepare packaging",
            command=["mkdir", "-p", Interpolate("julia/" + version)],
            workdir="/mnt/storage/buildslave"),
        ShellCommand(
            name="package Julia",
            command=["tar", "--create", "--verbose", "--file",
                     Interpolate("/mnt/storage/buildslave/julia/" + version + "/%(prop:hash)s.tar"),
                     "usr"],
            workdir="julia/build"),
        ShellCommand(
            name="publish",
            command=["ln", "--symbolic", "--force",
                     Interpolate("%(prop:hash)s.tar"), "latest.tar"],
            workdir=Interpolate("/mnt/storage/buildslave/julia/" + version))
    ])

    return f

# Steps to build and test a package
def build_package(package, julia_version, extra_env={}):
    f = BuildFactory()

    # TODO: these builders can start with a clean slate,
    #       can we do so instead of manually removing old dirs?


    ## julia

    f.addSteps([
        RemoveDirectory(
            name="remove Julia",
            dir="julia"),
        ShellCommand(
            name="prepare deployment",
            command=["mkdir", "julia"],
            workdir="."),
        ShellCommand(
            name="deploy Julia %s"%julia_version,
            command=["tar", "--extract", "--verbose", "--file",
                     Interpolate("/mnt/storage/buildslave/julia/"+julia_version+"/latest.tar")],
            workdir="julia",
            haltOnFailure = True)
    ])


    ## package

    package_env = generic.merge(
        {"JULIA_PKGDIR":    Interpolate("%(prop:builddir)s/packages")},
        extra_env
    )

    f.addSteps([
        RemoveDirectory(
            name="remove packages",
            dir="packages"),
        ShellCommand(
            name="initialize package manager",
            command=["usr/bin/julia", "--eval", 'Pkg.init()'],
            env=package_env,
            workdir="julia"),
        SetPropertyFromCommand(
            name="get package directory",
            command=["usr/bin/julia", "--eval", "println(Pkg.dir())"],
            property='pkgdir',
            env=package_env,
            workdir="julia"),
        Git(
            name="checkout",
            repourl=getRepositoryURL(package),
            codebase=package,
            workdir=Interpolate("%(prop:pkgdir)s/" + package),
            haltOnFailure=True),
        ShellCommand(
            name="resolve dependencies",
            command=["usr/bin/julia", "--eval", 'Pkg.resolve()'],
            env=package_env,
            workdir="julia"),
        ShellCommand(
            name="build",
            command=["usr/bin/julia", "--eval", 'Pkg.build("%s")'%package],
            env=package_env,
            workdir="julia"),
        ShellCommand(
            name="test",
            command=["usr/bin/julia", "--eval", 'Pkg.test("%s")'%package],
            env=package_env,
            workdir="julia")
    ])


    ## coverage

    f.addSteps([
        ShellCommand(
            name="install Coverage.jl",
            command=["usr/bin/julia", "--eval", 'Pkg.add("Coverage")'],
            env=package_env,
            workdir="julia",
            haltOnFailure=True,
            flunkOnFailure=False),
        ShellCommand(
            name="submit %s.jl coverage"%package,
            command=["usr/bin/julia", "--eval",
                     'cd(Pkg.dir("%s")); using Coverage; Codecov.submit_local(process_folder())'%package],
            env=generic.merge({ "CODECOV_TOKEN": passwords.codecov[package] },
                              package_env),
            workdir="julia",
            flunkOnFailure=False)
    ])


    return f





####### BUILD CONFIGURATIONS & SCHEDULERS

c['builders'] = []

from buildbot.config import BuilderConfig
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler

# manage builds of Julia
julia_builds = {
    'master': 'master',
    '0.5':    'release-0.5'
}
julia_builders = []
for version, branch in julia_builds.iteritems():
    # instantiate build configurations
    versioned_builders = []
    for arch, slave in configurations.iteritems():
        name = "Julia %s (%s)"%(version, arch)
        c['builders'].append(
            BuilderConfig(
                name=name,
                slavenames=[slave],
                factory=build_julia(version)
            )
        )
        versioned_builders.append(name)
    julia_builders.extend(versioned_builders)

    # set-up schedulers starting these build configurations
    c['schedulers'].append(
        SingleBranchScheduler(
            name="julia-%s"%version,
            change_filter = filter.ChangeFilter(branch = branch),
            builderNames = versioned_builders
        )
    )
c['schedulers'].append(ForceScheduler(
    name = "Build Julia",
    codebases = getCodebases(['Julia']),
    builderNames = julia_builders)
)

# manage builds of LLVM.jl
# TODO: build against version of Julia with different LLVMs
llvm_builds = {
    '':         {},
    'debug':    { 'DEBUG': "1" },
    'trace':    { 'TRACE': "1" }
}
# instantiate build configurations
llvm_builders = []
for julia_version in ['0.5', 'master']:
    for arch, slave in configurations.iteritems():
        for build, env in llvm_builds.iteritems():
            if build == '':
                name = "LLVM.jl on Julia %s (%s)"%(julia_version, arch)
            else:
                name = "LLVM.jl (%s) on Julia %s (%s)"%(build, julia_version, arch)
            c['builders'].append(
                BuilderConfig(
                    name=name,
                    slavenames=[slave],
                    factory=build_package("LLVM", julia_version, env)
                )
            )
            llvm_builders.append(name)

# set-up schedulers starting these build configurations
c['schedulers'].extend([
    SingleBranchScheduler(
        name="LLVM.jl",
        change_filter = filter.ChangeFilter(branch = None),
        builderNames = llvm_builders
    ),
    ForceScheduler(
    name = "Build LLVM.jl",
    codebases = getCodebases(['LLVM']),
    builderNames = llvm_builders)
])



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
    useHttpHeader = True,
    httpLoginUrl = '/buildbot/login',
    auth = auth.HTPasswdAprAuth('/etc/apache2/users.conf'),

    # Totally disabled
    gracefulShutdown = False,
    forceAllBuilds = False,
    stopAllBuilds = False,
    pingBuilder = False,

    # Only for authenticated users
    forceBuild = 'auth',
    stopBuild = 'auth',
    cancelPendingBuild = 'auth',
    pauseSlave = 'auth',
)
c['status'].append(html.WebStatus(
        http_port="tcp:8013:interface=127.0.0.1",
        authz=authz_cfg
    )
)

import slack
slack_notifier = slack.SlackStatusPush(passwords.slackhook,
                                       False, "buildbot", "https://a.fsdn.com/allura/p/buildbot/icon")
# c['status'].append(slack_notifier)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Julia"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ci.maleadt.net/buildbot/julia/"



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
