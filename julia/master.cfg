# -*- python -*-
# ex: set syntax=python:

import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, "common"))

import passwords

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave('hydor.elis.ugent.be', passwords.buildslaves['hydor.elis.ugent.be'])
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9987}}

configurations = {
    'x86-64': 'hydor.elis.ugent.be'
}



####### CODEBASES

## repository database with URLs and default branches

repositories = {
    'Julia':         (r'https://github.com/JuliaLang/julia',           None),
    # package repositories are populated by `schedule_package`
}

# Get the URL of a certain repository
def getRepositoryURL(repo):
    return repositories[repo][0]

# Get the default branch of a certain repository
def getRepositoryBranch(repo):
    return repositories[repo][1]


## codebase dict for schedulers

def getCodebases(repositories, branches={}):
    # build the codebases dict
    codebases = {}
    for repo in repositories:
        url = getRepositoryURL(repo)
        branch = getRepositoryBranch(repo)

        # allow overriding the selected branch
        if repo in branches:
            branch = branches[repo]

        codebases[repo] = { 'repository': url,
                            'branch':     branch}
    return codebases



####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = [
    # package repositories are handled through a webhook
    GitPoller(getRepositoryURL('Julia'),      branches=True, pollInterval=5*60)
]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.changes import filter

c['schedulers'] = []




####### BUILD FACTORIES

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.plugins import steps
from generic import FileCreate
import generic

# TODO: encode slave's `/mnt/storage/buildslave` in its `buildbot.tac`?

# Steps to build, test and deploy Julia
def build_julia(version, triggerables, llvm=None, debug=False, cores=16):
    f = BuildFactory()


    ## prepare

    f.addSteps([
        Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='full',
            method='fresh',
            codebase="Julia",
            workdir="julia"),
        SetPropertyFromCommand(
            name="get commit name",
            command="contrib/commit-name.sh",
            property="commit_name",
            workdir="julia"),

        ShellCommand(
            name="restore srccache",
            command=["rsync", "--archive", "--verbose",
                     "/mnt/storage/buildbot/slaves/julia/srccache", "deps"],
            workdir="julia",
            flunkOnFailure=False),
    ])


    ## build

    # environment variables
    julia_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes",
        "JULIA_CPU_CORES":  str(cores)
    }

    # Make.user
    julia_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",
        "FC":               "/usr/local/lib/ccache/bin/gfortran",

        "BUILD_LLVM_CLANG": "1",
        "LLVM_ASSERTIONS":  "1"
    }
    if llvm is not None:
        julia_config["LLVM_VER"] = llvm

    f.addSteps([
        FileCreate(
            name="configure Julia",
            data=generic.strMakeUser(julia_config),
            slavedest="Make.user",
            workdir="julia",
            haltOnFailure=True),
        ShellCommand(
            name="compile Julia",
            command=["make", "-j", str(cores), "all"],
            env=julia_env,
            workdir="julia",
            haltOnFailure=True),
        ShellCommand(
            name="test Julia",
            command=["make", "testall"],
            env=julia_env,
            workdir="julia",
            haltOnFailure=True),
    ])


    ## package

    f.addSteps([
        ShellCommand(
            name="prepare packaging",
            command=["mkdir", "-p", "julia/" + version],
            workdir="/mnt/storage/buildbot/slaves")
    ])

    # using `make dist` would be nice, but we need access to many more files:
    # - llvm-config and libLLVM for LLVM.jl/CUDAnative.jl
    #   https://github.com/JuliaLang/julia/issues/19302
    #   https://github.com/maleadt/LLVM.jl/issues/17
    # - private Clang headers for Cxx.jl/CUDAnativelib.jl
    # ... so just tar up those parts of the build tree we need
    #
    # However, it complicates building against 0.5 because not doing `make dist`
    # results in an incomplete build dir (see JuliaLang/julia#19002),
    # so we need to include even more sources.
    #
    # NOTE: we don't just tar up the _entire_ build tree for disk usage reasons
    def decode_assignment(rc, stdout, stderr):
        var, value = stdout.rstrip().split('=')
        return {var: value}
    f.addStep(
        SetPropertyFromCommand(
            name="get LLVM version",
            command=["make", "print-LLVM_VER"],
            extract_fn=decode_assignment,
            workdir="julia/deps")
    )
    files = [
        # Compiled julia + tools (for LLVM.jl/CUDAnative.jl)
        "usr",
        # Build properties (for Cxx.jl/CUDAnativelib.jl)
        "Make.user", "deps/Versions.make",
        # Headers missing from build tree (for LLVM.jl on 0.5)
        "src", "contrib",
        # LLVM/Clang sources (for Cxx.jl/CUDAnativelib.jl)
        Interpolate("deps/srccache/llvm-%(prop:LLVM_VER)s")
    ]

    f.addSteps([
        SetPropertyFromCommand(
            name="get commit hash",
            command=["git", "rev-parse", "--short=10", "HEAD"],
            property="commit_hash",
            workdir="julia"),
        ShellCommand(
            name="package Julia",
            command=["tar", "--create", "--verbose", "--file",
                     Interpolate("/mnt/storage/buildbot/slaves/julia/" + version + "/julia-%(prop:commit_name)s.tar")
                    ] + files,
            workdir="julia",
            haltOnFailure=True)
    ])

    f.addStep(
        ShellCommand(
            name="publish",
            command=["ln", "--symbolic", "--force",
                     Interpolate("julia-%(prop:commit_name)s.tar"), "latest.tar"],
            workdir=Interpolate("/mnt/storage/buildbot/slaves/julia/" + version))
    )

    deploy_location = "/opt/julia-"+version+"/"
    includes = [Interpolate("--include=/%(kw:file)s", file=file) for file in files] + [
                Interpolate("--include=/%(kw:file)s/**", file=file) for file in files]
    f.addSteps([
        ShellCommand(
            name="deploy",
            command=["rsync", "--archive", "--delete", "--delete-excluded"] + includes +
                    ["--exclude=*", ".", "/opt/julia-"+version+"/"],
            workdir="julia"),
        ShellCommand(
            name="fix permissions",
            command=["find", "/opt/julia-"+version, "(", "-type", "f", "-or", "-type", "d", ")",
                     "-exec", "chmod", "o=u-w,g=u-w", "{}", "+"])
    ])


    ## finish

    f.addSteps([
        ShellCommand(
            name="save srccache",
            command=["rsync", "--archive", "--verbose",
                     "--min-size=100K", "--exclude", "/*/*/",
                     "deps/srccache", "/mnt/storage/buildbot/slaves/julia"],
            workdir="julia")
    ])

    if len(triggerables) > 0:
        f.addStep(
            steps.Trigger(
                schedulerNames=triggerables,
                alwaysUseLatest=True)
        )

    return f

# Steps to build and test a package
def build_package(package, julia_version, extra_env={}):
    f = BuildFactory()

    # TODO: these builders can start with a clean slate,
    #       can we do so instead of manually removing old dirs?


    ## julia

    f.addSteps([
        RemoveDirectory(
            name="remove Julia",
            dir="julia"),
        ShellCommand(
            name="prepare deployment",
            command=["mkdir", "julia"],
            workdir="."),
        ShellCommand(
            name="deploy Julia %s"%julia_version,
            command=["tar", "--extract", "--verbose", "--file",
                     Interpolate("/mnt/storage/buildbot/slaves/julia/"+julia_version+"/latest.tar")],
            workdir="julia",
            haltOnFailure=True),
        ShellCommand(
            name="dump Julia version info",
            command=["usr/bin/julia", "--eval", 'versioninfo()'],
            workdir="julia")
    ])


    ## package

    package_env = generic.merge(
        {"JULIA_PKGDIR":    Interpolate("%(prop:builddir)s/packages")},
        extra_env
    )

    f.addSteps([
        RemoveDirectory(
            name="remove packages",
            dir="packages"),
        ShellCommand(
            name="initialize package manager",
            command=["usr/bin/julia", "--eval", 'Pkg.init()'],
            env=package_env,
            workdir="julia"),
        SetPropertyFromCommand(
            name="get package directory",
            command=["usr/bin/julia", "--eval", "println(Pkg.dir())"],
            property='pkgdir',
            env=package_env,
            workdir="julia"),
        Git(
            name="checkout",
            repourl=getRepositoryURL(package),
            codebase=package,
            workdir=Interpolate("%(prop:pkgdir)s/" + package),
            haltOnFailure=True),
        ShellCommand(
            name="resolve",
            command=["usr/bin/julia", "--eval", 'Pkg.resolve()'],
            env=package_env,
            workdir="julia"),
        ShellCommand(
            # FIXME: might trigger rebuild of dependency, already build by `resolve`
            name="build",
            command=["usr/bin/julia", "--eval", 'Pkg.build("%s")'%package],
            env=package_env,
            workdir="julia"),
        ShellCommand(
            name="test",
            command=["usr/bin/julia", "--eval", 'Pkg.test("%s", coverage=true)'%package],
            env=package_env,
            workdir="julia")
    ])


    ## coverage

    if package in passwords.codecov:
        f.addSteps([
            ShellCommand(
                name="install Coverage.jl",
                command=["usr/bin/julia", "--eval", 'Pkg.add("Coverage")'],
                env=package_env,
                workdir="julia",
                haltOnFailure=True,
                flunkOnFailure=False),
            ShellCommand(
                name="submit coverage",
                command=["usr/bin/julia", "--eval",
                         'cd(Pkg.dir("%s")); using Coverage; Codecov.submit_local(process_folder())'%package],
                env=generic.merge({ "CODECOV_TOKEN": passwords.codecov[package] },
                                  package_env),
                workdir="julia",
                flunkOnFailure=False)
        ])


    return f


# Steps to build and test Julia using ASAN
def build_julia_asan(llvm=None, cores=16):
    f = BuildFactory()


    ## prepare

    f.addSteps([
        Git(
            name="checkout",
            repourl=getRepositoryURL("Julia"),
            mode='full',
            method='fresh',
            codebase="Julia",
            workdir="julia"),
        SetPropertyFromCommand(
            name="get commit name",
            command="contrib/commit-name.sh",
            property="commit_name",
            workdir="julia"),

        ShellCommand(
            name="restore srccache",
            command=["rsync", "--archive", "--verbose",
                     "/mnt/storage/buildbot/slaves/julia/srccache", "deps"],
            workdir="julia",
            flunkOnFailure=False),
    ])


    ## toolchain

    toolchain_env = {
        "VERBOSE":          "1",
        "CCACHE_CPP2":      "yes"
    }
    toolchain_config = {
        "USECLANG":         "1",
        "CC":               "/usr/local/lib/ccache/bin/clang",
        "CXX":              "/usr/local/lib/ccache/bin/clang++",
        "FC":               "/usr/local/lib/ccache/bin/gfortran",

        "BUILD_LLVM_CLANG": "1",

        # ASAN isn't built with autotools...
        "LLVM_USE_CMAKE":   "1",
        # ... but that triggers LLVM bug #23649
        "USE_LLVM_SHLIB":   "0",
    }
    if llvm is not None:
        toolchain_config["LLVM_VER"] = llvm

    f.addSteps([
        ShellCommand(
            name="configure toolchain",
            command=["make", "O=toolchain", "configure"],
            env=toolchain_env,
            workdir="julia"),
        FileCreate(
            name="configure toolchain",
            data=generic.strMakeUser(toolchain_config),
            slavedest="Make.user",
            workdir="julia/toolchain",
            haltOnFailure=True),
        ShellCommand(
            name="compile toolchain",
            command=["make", "-j", str(cores), "install-llvm"],
            env=toolchain_env,
            workdir="julia/toolchain/deps",
            haltOnFailure=True),
        ShellCommand(
            name="fix toolchain",
            command="mv usr/bin/* usr/tools",
            workdir="julia/toolchain",
            flunkOnFailure=False),
    ])


    ## build

    # ASAN options for running Julia (build & test)
    asan_options = {
        "allow_user_segv_handler":  "1",
        "detect_leaks":             "0",

        # Memory-saving options from "Fast memory debugger for large software projects"
        # http://injoit.org/index.php/j1/article/viewFile/231/184
        "malloc_context_size":      "2",
        "fast_unwind_on_malloc":    "0",
        #"quarantine_size_mb":       "64"   # 1<<6, ASAN_LOW_MEMORY default
        # TODO: also redzone=32?
    }
    asan_options_str = ':'.join("%s=%s" % (key,value) for key,value in asan_options.items())

    # environment variables
    julia_env = {
        "VERBOSE":                  "1",
        "CCACHE_CPP2":              "yes",
        "JULIA_CPU_CORES":          str(cores),

        "ASAN_OPTIONS":             asan_options_str,
        "ASAN_SYMBOLIZER_PATH":     Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/llvm-symbolizer")
    }

    # Make.user
    julia_config = {
        "USECLANG":                 "1",
        "CC":                       Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/clang"),
        "CXX":                      Interpolate("%(prop:builddir)s/julia/toolchain/usr/tools/clang++"),

        # autotools doesn't have a self-sanitize mode
        "LLVM_USE_CMAKE":           "1",

        "SANITIZE":                 "1",
        "LLVM_SANITIZE":            "1",

        "WITH_GC_DEBUG_ENV":        "1",
        "JULIA_BUILD_MODE":         "debug",
    }
    if llvm is not None:
        julia_config["LLVM_VER"] = llvm

    f.addSteps([
        ShellCommand(
            name="configure Julia",
            command=["make", "O=build", "configure"],
            env=toolchain_env,
            workdir="julia"),
        FileCreate(
            name="configure Julia",
            data=julia_config,
            slavedest="Make.user",
            workdir="julia/build",
            haltOnFailure=True),
        ShellCommand(
            name="compile Julia",
            command=["make", "-j", str(cores)],
            env=julia_env,
            workdir="julia/build",
            haltOnFailure=True),
        ShellCommand(
            name="test Julia",
            command=["make", "testall"],
            timeout=7200,
            env=julia_env,
            workdir="julia/build",
            haltOnFailure=True)
    ])


    ## finish

    f.addSteps([
        ShellCommand(
            name="save srccache",
            command=["rsync", "--archive", "--verbose",
                     "--min-size=100K", "--exclude", "/*/*/",
                     "deps/srccache", "/mnt/storage/buildbot/slaves/julia"],
            workdir="julia")
    ])


    return f


####### BUILD CONFIGURATIONS & SCHEDULERS

c['builders'] = []

from buildbot.config import BuilderConfig
from buildbot.plugins import schedulers
from buildbot.plugins import schedulers
from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler, CodebaseParameter, FixedParameter

from collections import defaultdict


## packages

default_matrix = {
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { }
    },
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    }
}

# check whether a branch is part of a pull request
def is_pr(branch):
    return branch.startswith('refs/pull/')


julia_triggerables = defaultdict(list)
def schedule_package(package, repo_url, matrix=default_matrix, github=None):
    """Create build configuration and schedule builds for a Julia package.

    Arguments:
    package -- name of the package (see `repositories`)
    julia_versions -- list of Julia versions to build against (see `julia_versions`)
    build_environments -- dict of build environments, `name: {env vars...}`
    """

    # save the repository
    global repositories
    if package not in repositories:
        repositories[package] = (repo_url, None)

    # provide GitHub repo details as build properties
    properties = {}
    if github is not None:
        owner, name = github.split('/')
        properties["github_repo_owner"] = owner
        properties["github_repo_name"] = name

    # instantiate build configurations
    ci_buildconfigs = defaultdict(list)
    master_buildconfigs = defaultdict(list)
    for name, conf in matrix.iteritems():
        for arch, slave in configurations.iteritems():
            config = "%s (%s)"%(name, arch)

            # CI builders are used to build commits on request (ie. pull requests)
            builder = '%s.jl CI: %s'%(package,config)
            c['builders'].append(
                BuilderConfig(
                    name=builder,
                    category="CI builds",
                    slavenames=[slave],
                    factory=build_package(package, conf['julia'], conf['env']),
                    properties=generic.merge({'github_status_context': config}, properties)
                )
            )
            ci_buildconfigs[conf['julia']].append(builder)

            # the master branch builder cannot be forced, and is used for badges etc.
            builder = '%s.jl: %s'%(package,config)
            c['builders'].append(
                BuilderConfig(
                    name=builder,
                    category=package,
                    slavenames=[slave],
                    factory=build_package(package, conf['julia'], conf['env']),
                    properties=generic.merge({'github_status_context': config}, properties)
                )
            )
            master_buildconfigs[conf['julia']].append(builder)

    # CI builders are triggered by commits on PR branches (notified through a web hook)
    ci_builders = [builder for builders in ci_buildconfigs.values() for builder in builders]
    c['schedulers'].append(
        AnyBranchScheduler(
            name="%s.jl (change monitor)"%package,
            builderNames=ci_builders,
            codebases=getCodebases([package]),
            change_filter=filter.ChangeFilter(branch_fn=is_pr),
        )
    )

    # The master branch builders are triggered by commits on the master branch,
    # and by Julia updates
    # FIXME: master branch commits (from the webhook) don't seem to trigger this scheduler?
    #        as a workaround (to keep badges fresh), I've added a Nightly and ForceScheduler
    master_builders = [builder for builders in master_buildconfigs.values() for builder in builders]
    c['schedulers'].extend([
        # FIXME: this one is broken
        AnyBranchScheduler(
            name="%s.jl (master branch change monitor)"%package,
            builderNames=master_builders,
            codebases=getCodebases([package]),
            change_filter=filter.ChangeFilter(branch=None),
        ),
        ForceScheduler(
            name="%s.jl (forced build from master)"%package,
            builderNames=master_builders,
            codebases=[CodebaseParameter(
                codebase=package,
                # configurable settings: none
                branch=FixedParameter(name="branch", default=""),
                revision=FixedParameter(name="revision", default=""),
                repository=FixedParameter(name="repository", default=""),
                project=FixedParameter(name="project", default=""),
            )],
            # disabled settings (default value)
            reason=FixedParameter(name="reason", default=""),
            properties=[]),
        schedulers.Nightly(
            name="%s.jl (nightly build from master)"%package,
            branch='master',
            builderNames=master_builders,
            hour=3,
            minute=0)
    ])
    for julia_version, builders in master_buildconfigs.iteritems():
        name = "%s.jl after Julia %s update"%(package,julia_version)
        c['schedulers'].append(
            schedulers.Triggerable(
                name=name,
                builderNames=builders,
                codebases=getCodebases([package])
            )
        )
        julia_triggerables[julia_version].append(name)

schedule_package("LLVM", "https://github.com/maleadt/LLVM.jl", github="maleadt/LLVM.jl", matrix={
    # Julia 0.5 ships LLVM 3.7
    'Julia 0.5, system LLVM 3.9': {
        'julia': '0.5',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1' }
    },
    # Julia 0.6 ships LLVM 3.9
    # this is the current stable version, so test thoroughly (DEBUG enables extra checks)
    'Julia 0.6, embedded LLVM': {
        'julia': '0.6',
        'env':   { }
    },
    'Julia 0.6, embedded LLVM, debug': {
        'julia': '0.6',
        'env':   { 'DEBUG': '1' }
    },
    'Julia 0.6, system LLVM 3.9': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.6, system LLVM 3.9, debug': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '3.9', 'USE_SYSTEM_LLVM': '1',
                   'DEBUG': '1' }
    },
    'Julia 0.6, system LLVM 4.0': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.6, system LLVM 4.0, debug': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '4.0', 'USE_SYSTEM_LLVM': '1',
                   'DEBUG': '1' }
    },
    'Julia 0.6, system LLVM 5.0': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '5.0', 'USE_SYSTEM_LLVM': '1' }
    },
    'Julia 0.6, system LLVM 5.0, debug': {
        'julia': '0.6',
        'env':   { 'LLVM_VER': '5.0', 'USE_SYSTEM_LLVM': '1',
                   'DEBUG': '1' },
    },
    # Julia master currently ships LLVM 3.9
    'Julia master, embedded LLVM': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("CUDAdrv", "https://github.com/JuliaGPU/CUDAdrv.jl", github="JuliaGPU/CUDAdrv.jl", matrix={
    # Julia 0.5
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { }
    },
    # Julia 0.6
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("CUDArt", "https://github.com/JuliaGPU/CUDArt.jl", github="JuliaGPU/CUDArt.jl")

schedule_package("CUDAnative", "https://github.com/JuliaGPU/CUDAnative.jl", github="JuliaGPU/CUDAnative.jl", matrix={
    # Julia 0.6
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("CUDAnativelib", "https://github.com/JuliaGPU/CUDAnativelib.jl", github="JuliaGPU/CUDAnativelib.jl", matrix={
    # Julia 0.6
    'Julia 0.6': {
        'julia': '0.6',
        'env':   { }
    },
    # Julia master
    'Julia master': {
        'julia': 'master',
        'env':   { }
    },
})

schedule_package("GPUArrays", "https://github.com/JuliaGPU/GPUArrays.jl", github="JuliaGPU/GPUArrays.jl")

schedule_package("CUFFT", "https://github.com/JuliaGPU/CUFFT.jl", github="JuliaGPU/CUFFT.jl")

schedule_package("CUBLAS", "https://github.com/JuliaGPU/CUBLAS.jl", github="JuliaGPU/CUBLAS.jl")

schedule_package("CUSPARSE", "https://github.com/JuliaGPU/CUSPARSE.jl", github="JuliaGPU/CUSPARSE.jl")

schedule_package("CUSOLVER", "https://github.com/kshyatt/CUSOLVER.jl", github="JuliaGPU/CUSOLVER.jl")

schedule_package("CLBLAS", "https://github.com/JuliaGPU/CLBLAS.jl", github="JuliaGPU/CLBLAS.jl")

schedule_package("OpenCL", "https://github.com/JuliaGPU/OpenCL.jl", github="JuliaGPU/OpenCL.jl")

schedule_package("GLVisualize", "https://github.com/JuliaGL/GLVisualize.jl", github="JuliaGL/GLVisualize.jl", matrix={
    'Julia 0.5': {
        'julia': '0.5',
        'env':   { 'CI': 'true' }
    },
})


## julia

# NOTE: this must happen after scheduling package builds,
#       because it schedules a Trigger which needs to know about the Triggerables
julia_versions = {
    'master': 'master',
    '0.5':    'release-0.5',
    '0.6':    'release-0.6'
}
for version, branch in julia_versions.iteritems():
    # instantiate build configurations
    julia_builders = []
    for arch, slave in configurations.iteritems():
        name = "Julia %s (%s)"%(version, arch)
        c['builders'].append(
            BuilderConfig(
                name=name,
                category="Julia",
                slavenames=[slave],
                factory=build_julia(version, julia_triggerables[version])
            )
        )
        julia_builders.append(name)

    # set-up schedulers starting these build configurations
    c['schedulers'].extend([
        SingleBranchScheduler(
            name="Julia %s (change monitor)"%version,
            builderNames=julia_builders,
            codebases=getCodebases(['Julia']),
            change_filter=filter.ChangeFilter(branch=branch)
        ),
        ForceScheduler(
            name="Julia %s (forced build)"%version,
            builderNames=julia_builders,
            codebases=[CodebaseParameter(
                codebase='Julia',
                # configurable settings: revision
                # disabled settings (specific value)
                branch=FixedParameter(name="branch", default=branch),
                # disabled settings (default value)
                repository=FixedParameter(name="repository", default=""),
                project=FixedParameter(name="project", default=""),
            )],
            # disabled settings (default value)
            reason=FixedParameter(name="reason", default=""),
            properties=[])
    ])

# manage ASAN builds of Julia
julia_asan_builders = []
for arch, slave in configurations.iteritems():
    name = "Julia with ASAN (%s)"%(arch)
    c['builders'].append(
        BuilderConfig(
            name=name,
            category="Julia",
            slavenames=[slave],
            factory=build_julia_asan()
        )
    )
    julia_asan_builders.append(name)
c['schedulers'].extend([
    ForceScheduler(
        name="Julia with ASAN (forced build)",
        builderNames=julia_asan_builders,
        codebases=[CodebaseParameter(
            codebase='Julia',
            # configurable settings: branch, revision
            # disabled settings (default value)
            repository=FixedParameter(name="repository", default=""),
            project=FixedParameter(name="project", default=""),
        )],
        # disabled settings (default value)
        reason=FixedParameter(name="reason", default=""),
        properties=[])
])



####### CODEBASES pt. 2

## codebase generator

repo_urls = {}
for repo,v in repositories.items():
    repo_urls[v[0]] = repo

    # sometimes, the repo is suffixed with .git...
    repo_urls["%s.git"%v[0]] = repo


def codebaseGenerator(chdict):
    return repo_urls[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

import BuildbotStatusShields as shields

# Detect the appropriate codebase from a GitHub-submitted payload
def detect_codebase(payload):
    url = payload['repository']['url']

    for repo in repositories:
        if url == getRepositoryURL(repo):
            return repo

    return None

authz_cfg = authz.Authz(
    useHttpHeader=True,
    httpLoginUrl='/buildbot/login',
    auth=auth.HTPasswdAprAuth('/etc/apache2/users.conf'),

    # Totally disabled
    gracefulShutdown=False,
    pingBuilder=False,

    # Only for authenticated users
    forceBuild='auth',
    forceAllBuilds='auth',
    stopBuild='auth',
    stopAllBuilds='auth',
    cancelPendingBuild='auth',
    pauseSlave='auth',
)
c['status'].append(
    shields.bind(html.WebStatus(
        http_port="tcp:8013:interface=127.0.0.1",
        authz=authz_cfg,
        change_hook_dialects={
            'github': {
                'secret': passwords.github['webhook'],
                'strict': True,
                'codebase': detect_codebase
            }
        }
    ))
)

from github_status import GitHubStatus  # NOTE: hacked GitHubStatus with context support
c['status'].append(GitHubStatus(
    token=passwords.github['token'],
    context=Interpolate("%(prop:github_status_context)s"),
    repoOwner=Interpolate("%(prop:github_repo_owner)s"),
    repoName=Interpolate("%(prop:github_repo_name)s"),
    startDescription='Build in progress.',
    endDescription='Build has finished.')
)

if passwords.slackhook is not None:
    import slack
    slack_notifier = slack.SlackStatusPush(passwords.slackhook,
                                           False, "buildbot", "https://a.fsdn.com/allura/p/buildbot/icon")
    c['status'].append(slack_notifier)



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Julia"
c['titleURL'] = "http://julialang.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ci.maleadt.net/buildbot/julia/"



####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
